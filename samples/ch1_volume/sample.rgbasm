include "utils.rgbinc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "vblank_interrupt", rom0[$0040]
    reti

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

def TILE_UI_NUMBER_0                equ (80)

def TILES_COUNT                     equ (384)
def BYTES_PER_TILE                  equ (16)
def TILES_BYTE_SIZE                 equ (TILES_COUNT * BYTES_PER_TILE)

def TILEMAPS_COUNT                  equ (1)
def BYTES_PER_TILEMAP               equ (1024)
def TILEMAPS_BYTE_SIZE              equ (TILEMAPS_COUNT * BYTES_PER_TILEMAP)

def GRAPHICS_DATA_SIZE              equ (TILES_BYTE_SIZE + TILEMAPS_BYTE_SIZE)
def GRAPHICS_DATA_ADDRESS_END       equ ($8000)
def GRAPHICS_DATA_ADDRESS_START     equ (GRAPHICS_DATA_ADDRESS_END - GRAPHICS_DATA_SIZE)

; load the graphics data from ROM to VRAM
macro LoadGraphicsDataIntoVRAM
    ld de, GRAPHICS_DATA_ADDRESS_START
    ld hl, _VRAM8000
    .load_tile\@
        ld a, [de]
        inc de
        ld [hli], a
        ld a, d
        cp a, high(GRAPHICS_DATA_ADDRESS_END)
        jr nz, .load_tile\@
endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

rsset _RAM

def WRAM_PAD_INPUT                  rb sizeof_PAD_INPUT
def WRAM_CHANNEL_VOLUME             rb 1

def WRAM_END                        rb 0

; sanity checks
def WRAM_USAGE                      equ (WRAM_END - _RAM)
println "WRAM usage: {d:WRAM_USAGE} bytes"
assert WRAM_USAGE <= $2000, "Too many bytes used in WRAM"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "sample", rom0

InitSample:
    ; init the WRAM state
    InitPadInput WRAM_PAD_INPUT
    copy [WRAM_CHANNEL_VOLUME], $F0

    ; init the sound
    copy [rNR52], AUDENA_ON
    copy [rNR50], $77
    copy [rNR51], $FF

    ; init graphics
    copy [rBGP], %11100100
    LoadGraphicsDataIntoVRAM

    ; enable interrupts
    copy [rIE], IEF_VBLANK
    ei

    ; set the graphics parameters and turn back LCD on
    copy [rLCDC], LCDCF_ON | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_BGON

    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

def TILE_INDEX_ZERO         equ (80)
def TILE_INDEX_A            equ (97)

def TERMINAL_LEFT_TILE_ADDRESS  equ (_SCRN0 + 4 * SCRN_VX_B + 10)
def TERMINAL_RIGHT_TILE_ADDRESS equ (_SCRN0 + 5 * SCRN_VX_B + 10)
def CHANNEL_TILE_ADDRESS        equ (_SCRN0 + 8 * SCRN_VX_B + 11)

UpdateSample:
    halt

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; vblank
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ; left terminal volume
    ld a, [rNR50]
    swap a
    and a, $07
    add a, TILE_INDEX_ZERO
    ld hl, TERMINAL_LEFT_TILE_ADDRESS
    ld [hl], a

    ; right terminal volume
    ld a, [rNR50]
    and a, $07
    add a, TILE_INDEX_ZERO
    ld hl, TERMINAL_RIGHT_TILE_ADDRESS
    ld [hl], a

    ; channel volume
    ld a, [WRAM_CHANNEL_VOLUME]
    swap a
    and a, $0F
    cp a, 10
    jr c, .compare_to_ten
        sub a, 10
        add a, TILE_INDEX_A
        ld hl, CHANNEL_TILE_ADDRESS
        ld [hl], a
        jr .compare_to_ten_end
    .compare_to_ten
        add a, TILE_INDEX_ZERO
        ld hl, CHANNEL_TILE_ADDRESS
        ld [hl], a
    .compare_to_ten_end

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; logic
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    UpdatePadInput WRAM_PAD_INPUT

    ; cycle through left terminal's volumes
    TestPadInput_Pressed WRAM_PAD_INPUT, PADF_LEFT
    jr nz, .left
        ld a, [rNR50]
        swap a
        inc a
        and a, $07
        swap a
        ld b, a

        ld a, [rNR50]
        and a, $8F
        or a, b
        ld [rNR50], a
    .left

    ; cycle through right terminal's volumes
    TestPadInput_Pressed WRAM_PAD_INPUT, PADF_RIGHT
    jr nz, .right
        ld a, [rNR50]
        inc a
        and a, $07
        ld b, a

        ld a, [rNR50]
        and a, $F8
        or a, b
        ld [rNR50], a
    .right

    ; increase the channel volume and loop to $00 if overflow
    TestPadInput_Pressed WRAM_PAD_INPUT, PADF_UP
    jr nz, .up
        ld a, [WRAM_CHANNEL_VOLUME]
        swap a
        inc a
        and a, $0F
        swap a
        ld [WRAM_CHANNEL_VOLUME], a
    .up

    ; decrease the channel volume and loop to $0F if underflow
    TestPadInput_Pressed WRAM_PAD_INPUT, PADF_DOWN
    jr nz, .down
        ld a, [WRAM_CHANNEL_VOLUME]
        swap a
        dec a
        and a, $0F
        swap a
        ld [WRAM_CHANNEL_VOLUME], a
    .down

    ; play a sound with the proper channel volume
    TestPadInput_Pressed WRAM_PAD_INPUT, PADF_A
    jr nz, .play_sound
        copy [rNR10], $00
        copy [rNR11], AUDLEN_DUTY_50
        copy [rNR12], [WRAM_CHANNEL_VOLUME]
        copy [rNR13], $0B
        copy [rNR14], $C6
    .play_sound

    ret

export InitSample, UpdateSample

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "graphics_data", rom0[GRAPHICS_DATA_ADDRESS_START]
incbin "tileset.chr"
incbin "sound_volume.tlm"

