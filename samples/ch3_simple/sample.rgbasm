include "utils.rgbinc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "vblank_interrupt", rom0[$0040]
	reti

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

def TILE_UI_NUMBER_0				equ (80)

def TILES_COUNT						equ (384)
def BYTES_PER_TILE					equ (16)
def TILES_BYTE_SIZE					equ (TILES_COUNT * BYTES_PER_TILE)

def TILEMAPS_COUNT					equ (1)
def BYTES_PER_TILEMAP				equ (1024)
def TILEMAPS_BYTE_SIZE				equ (TILEMAPS_COUNT * BYTES_PER_TILEMAP)

def GRAPHICS_DATA_SIZE				equ (TILES_BYTE_SIZE + TILEMAPS_BYTE_SIZE)
def GRAPHICS_DATA_ADDRESS_END		equ ($8000)
def GRAPHICS_DATA_ADDRESS_START		equ (GRAPHICS_DATA_ADDRESS_END - GRAPHICS_DATA_SIZE)

; load the graphics data from ROM to VRAM
macro LoadGraphicsDataIntoVRAM
	ld de, GRAPHICS_DATA_ADDRESS_START
	ld hl, _VRAM8000
	.load_tile\@
		ld a, [de]
		inc de
		ld [hli], a
		ld a, d
		cp a, high(GRAPHICS_DATA_ADDRESS_END)
		jr nz, .load_tile\@
endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

rsset _RAM

def WRAM_PAD_INPUT					rb sizeof_PAD_INPUT

def WRAM_END						rb 0

; sanity checks
def WRAM_USAGE						equ (WRAM_END - _RAM)
println "WRAM usage: {d:WRAM_USAGE} bytes"
assert WRAM_USAGE <= $2000, "Too many bytes used in WRAM"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "sample", rom0

ch3_waveform:
db $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
db $00, $00, $00, $00, $00, $00, $00, $00
ch3_waveform_end:

InitSample:
	; init the WRAM state
	InitPadInput WRAM_PAD_INPUT

	; init the sound
	copy [rNR52], AUDENA_ON
	copy [rNR50], $77
	copy [rNR51], $FF

	; init graphics
	copy [rBGP], %11100100
	LoadGraphicsDataIntoVRAM

	; disable channel 3 and copy the waveform data
	copy [rNR30], $00
	ld de, ch3_waveform
	ld hl, _AUD3WAVERAM
	ld c, ch3_waveform_end - ch3_waveform
	.ch3_data_copy
		ld a, [de]
		inc de
		ld [hli], a
		dec c
	jr nz, .ch3_data_copy

	; enable interrupts
	copy [rIE], IEF_VBLANK
	ei

	; set the graphics parameters and turn back LCD on
	copy [rLCDC], LCDCF_ON | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_BGON

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateSample:
	halt

	UpdatePadInput WRAM_PAD_INPUT

	; play channel 1 sound
	TestPadInput_Pressed WRAM_PAD_INPUT, PADF_A
	jr nz, .play_ch1
		copy [rNR10], $00
		copy [rNR11], $80
		copy [rNR12], $F0
		copy [rNR13], $0B
		copy [rNR14], $C6
	.play_ch1

	; play channel 3 sound
	TestPadInput_Pressed WRAM_PAD_INPUT, PADF_B
	jr nz, .play_ch3
		copy [rNR30], $00 ; stop the sound to avoid any corruption
		copy [rNR30], $80
		copy [rNR31], $C0
		copy [rNR32], $20
		copy [rNR33], $06
		copy [rNR34], $C7
	.play_ch3

	ret

export InitSample, UpdateSample

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "graphics_data", rom0[GRAPHICS_DATA_ADDRESS_START]
incbin "tileset.chr"
incbin "ch3_simple.tlm"

