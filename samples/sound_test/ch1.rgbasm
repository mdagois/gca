include "shared.rgbinc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Channel data
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

rsreset
def NOTE_FREQUENCY_CH124			rb 2
def NOTE_FREQUENCY_CH3				rb 2
def NOTE_TILE_INDICES				rb 3
def sizeof_NOTE						rb 0

def LENGTH_COUNT					equ 65
def OCTAVE_NOTES_COUNT				equ 12
def NOTES_COUNT						equ (7 * OCTAVE_NOTES_COUNT)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; WRAM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

rsreset
def CONTROL_FLAG_PLAY_SOUND			rb 1
def CONTROL_FLAGS_COUNT				rb 0
assert CONTROL_FLAGS_COUNT < 8, "Too many control flags declared"

rsset WRAM_CHANNEL_START
def WRAM_CONTROL_FLAGS				rb 1
def WRAM_SELECTION_INDEX			rb 1
def WRAM_CH1_REGISTER				rb 5

def WRAM_NOTE_NUMBER				rb 1
def WRAM_DUTY_INDEX					rb 1
def WRAM_LENGTH_INDEX				rb 1
def WRAM_ENV_INIT					rb 1
def WRAM_ENV_STEP					rb 1
def WRAM_ENV_DIR					rb 1
def WRAM_SWEEP_STEP					rb 1
def WRAM_SWEEP_SHIFT				rb 1
def WRAM_SWEEP_DIR					rb 1
def WRAM_END						rb 0

; sanity checks
def WRAM_USAGE						equ (WRAM_END - _RAM)
println "CH1 WRAM usage: {d:WRAM_USAGE} bytes"
assert WRAM_USAGE <= $2000, "Too many bytes used in WRAM"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Update functions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "ch1_update", rom0

; macro to handle the menu navigation
; \1 = previous line, \2 = current line, \3 = next line
; \4 = previous index, \5 = next index
macro ProcessSelection
	TestPadInput_PressedAll WRAM_PAD_INPUT, PADF_DOWN
	jr nz, .down\@
		PushTransfer _SCRN0 + SCRN_VX_B * \2, TILE_INDEX_BLANK
		PushTransfer _SCRN0 + SCRN_VX_B * \3, TILE_INDEX_CURSOR
		ld hl, WRAM_SELECTION_INDEX
		ld [hl], \5
	.down\@

	TestPadInput_PressedAll WRAM_PAD_INPUT, PADF_UP
	jr nz, .up\@
		PushTransfer _SCRN0 + SCRN_VX_B * \2, TILE_INDEX_BLANK
		PushTransfer _SCRN0 + SCRN_VX_B * \1, TILE_INDEX_CURSOR
		ld hl, WRAM_SELECTION_INDEX
		ld [hl], \4
	.up\@
endm

; update functions table
UpdateFunc:
dw UpdateNote
dw UpdateDuty
dw UpdateLength
dw UpdateEnvInit
dw UpdateEnvStep
dw UpdateEnvDir
dw UpdateSweepTime
dw UpdateSweepStep
dw UpdateSweepDir
UpdateFunc_End:

; line numbers
def LINE_NOTE						equ (2)
def LINE_DUTY						equ (3)
def LINE_LENGTH						equ (4)
def LINE_ENV_INIT					equ (6)
def LINE_ENV_STEP					equ (7)
def LINE_ENV_DIR					equ (8)
def LINE_SWEEP_STEP					equ (10)
def LINE_SWEEP_SHIFT				equ (11)
def LINE_SWEEP_DIR					equ (12)

; selection indices
rsreset
def SELECTION_NOTE					rb 1
def SELECTION_DUTY					rb 1
def SELECTION_LENGTH				rb 1
def SELECTION_ENV_INIT				rb 1
def SELECTION_ENV_STEP				rb 1
def SELECTION_ENV_DIR				rb 1
def SELECTION_SWEEP_STEP			rb 1
def SELECTION_SWEEP_SHIFT			rb 1
def SELECTION_SWEEP_DIR				rb 1
def SELECTIONS_COUNT				rb 0
assert SELECTIONS_COUNT == ((UpdateFunc_End - UpdateFunc) / 2), "The number of selections is not in sync with the number of update functions"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateNote:
	ProcessSelection LINE_SWEEP_DIR, LINE_NOTE, LINE_DUTY, SELECTION_SWEEP_DIR, SELECTION_DUTY

	TestPadInput_PressedAll WRAM_PAD_INPUT, PADF_LEFT
	jr nz, .left
		TestPadInput_HeldAll WRAM_PAD_INPUT, PADF_B
		ld a, [WRAM_NOTE_NUMBER]
		jr nz, .fast_mode_left
			add a, -OCTAVE_NOTES_COUNT
			jr .fast_mode_left_end
		.fast_mode_left
			dec a
		.fast_mode_left_end
		bit 7, a
		ld [WRAM_NOTE_NUMBER], a
		jr z, .update_ui

		ld a, NOTES_COUNT - 1
		ld [WRAM_NOTE_NUMBER], a
		jr .update_ui
	.left

	TestPadInput_PressedAll WRAM_PAD_INPUT, PADF_RIGHT
	jr nz, .right
		TestPadInput_HeldAll WRAM_PAD_INPUT, PADF_B
		ld a, [WRAM_NOTE_NUMBER]
		jr nz, .fast_mode_right
			add a, OCTAVE_NOTES_COUNT
			jr .fast_mode_right_end
		.fast_mode_right
			inc a
		.fast_mode_right_end
		cp a, NOTES_COUNT
		ld [WRAM_NOTE_NUMBER], a
		jr c, .update_ui

		xor a
		ld [WRAM_NOTE_NUMBER], a
		jr .update_ui
	.right

	ret

	.update_ui
		ld a, [WRAM_NOTE_NUMBER]
		ld c, a
		sla a
		ld h, 0
		ld l, a
		sla l
		rl h
		sla l
		rl h

		ld a, c
		cpl
		inc a
		ld c, a
		ld a, $FF
		adc a, 0
		ld b, a

		add hl, bc
		ld de, NoteTable + NOTE_TILE_INDICES
		add hl, de

		ld a, [hl]
		push hl
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_NOTE + 17, a
		pop hl
		inc hl
		ld a, [hl]
		push hl
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_NOTE + 18, a
		pop hl
		inc hl
		ld a, [hl]
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_NOTE + 19, a

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateDuty:
	ProcessSelection LINE_NOTE, LINE_DUTY, LINE_LENGTH, SELECTION_NOTE, SELECTION_LENGTH

	TestPadInput_PressedAll WRAM_PAD_INPUT, PADF_LEFT
	jr nz, .left
		ld a, [WRAM_DUTY_INDEX]
		dec a
		and a, $03
		ld [WRAM_DUTY_INDEX], a
		jr .update_ui
	.left

	TestPadInput_PressedAll WRAM_PAD_INPUT, PADF_RIGHT
	jr nz, .right
		ld a, [WRAM_DUTY_INDEX]
		inc a
		and a, $03
		ld [WRAM_DUTY_INDEX], a
		jr .update_ui
	.right

	ret

	.update_ui
		ld a, [WRAM_DUTY_INDEX]
		sla a
		sla a
		ld h, 0
		ld l, a
		ld de, DutyCycleTable
		add hl, de

		ld a, [hl]
		push hl
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_DUTY + 16, a
		pop hl
		inc hl
		ld a, [hl]
		push hl
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_DUTY + 17, a
		pop hl
		inc hl
		ld a, [hl]
		push hl
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_DUTY + 18, a
		pop hl
		inc hl
		ld a, [hl]
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_DUTY + 19, a

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateLength:
	ProcessSelection LINE_DUTY, LINE_LENGTH, LINE_ENV_INIT, SELECTION_DUTY, SELECTION_ENV_INIT

	TestPadInput_PressedAll WRAM_PAD_INPUT, PADF_LEFT
	jr nz, .left
		TestPadInput_HeldAll WRAM_PAD_INPUT, PADF_B
		ld a, [WRAM_LENGTH_INDEX]
		jr nz, .fast_mode_left
			add a, -10
			jr .fast_mode_left_end
		.fast_mode_left
			dec a
		.fast_mode_left_end
		bit 7, a
		jr z, .out_of_left_bound
			ld a, LENGTH_COUNT - 1
		.out_of_left_bound
		ld [WRAM_LENGTH_INDEX], a
		jr .update_ui
	.left

	TestPadInput_PressedAll WRAM_PAD_INPUT, PADF_RIGHT
	jr nz, .right
		TestPadInput_HeldAll WRAM_PAD_INPUT, PADF_B
		ld a, [WRAM_LENGTH_INDEX]
		jr nz, .fast_mode_right
			add a, 10
			jr .fast_mode_right_end
		.fast_mode_right
			inc a
		.fast_mode_right_end
		cp a, LENGTH_COUNT
		jr c, .out_of_right_bound
			xor a
		.out_of_right_bound
		ld [WRAM_LENGTH_INDEX], a
		jr .update_ui
	.right

	ret

	.update_ui
		ld a, [WRAM_LENGTH_INDEX]
		ld b, 0
		ld c, a
		sla a
		ld h, 0
		ld l, a
		sla l
		rl h
		ld de, LengthTable
		add hl, de
		add hl, bc

		ld a, [hl]
		push hl
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_LENGTH + 15, a
		pop hl
		inc hl
		ld a, [hl]
		push hl
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_LENGTH + 16, a
		pop hl
		inc hl
		ld a, [hl]
		push hl
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_LENGTH + 17, a
		pop hl
		inc hl
		ld a, [hl]
		push hl
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_LENGTH + 18, a
		pop hl
		inc hl
		ld a, [hl]
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_LENGTH + 19, a

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateEnvInit:
	ProcessSelection LINE_LENGTH, LINE_ENV_INIT, LINE_ENV_STEP, SELECTION_LENGTH, SELECTION_ENV_STEP

	TestPadInput_PressedAll WRAM_PAD_INPUT, PADF_LEFT
	jr nz, .left
		ld a, [WRAM_ENV_INIT]
		dec a
		and a, $0F
		ld [WRAM_ENV_INIT], a
		jr .update_ui
	.left

	TestPadInput_PressedAll WRAM_PAD_INPUT, PADF_RIGHT
	jr nz, .right
		ld a, [WRAM_ENV_INIT]
		inc a
		and a, $0F
		ld [WRAM_ENV_INIT], a
		jr .update_ui
	.right

	ret

	.update_ui
		ld a, [WRAM_ENV_INIT]
		sla a
		ld h, 0
		ld l, a
		ld de, EnvelopeInitTable
		add hl, de

		ld a, [hl]
		push hl
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_ENV_INIT + 18, a
		pop hl
		inc hl
		ld a, [hl]
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_ENV_INIT + 19, a

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateEnvStep:
	ProcessSelection LINE_ENV_INIT, LINE_ENV_STEP, LINE_ENV_DIR, SELECTION_ENV_INIT, SELECTION_ENV_DIR

	TestPadInput_PressedAll WRAM_PAD_INPUT, PADF_LEFT
	jr nz, .left
		ld a, [WRAM_ENV_STEP]
		dec a
		and a, $07
		ld [WRAM_ENV_STEP], a
		jr .update_ui
	.left

	TestPadInput_PressedAll WRAM_PAD_INPUT, PADF_RIGHT
	jr nz, .right
		ld a, [WRAM_ENV_STEP]
		inc a
		and a, $07
		ld [WRAM_ENV_STEP], a
		jr .update_ui
	.right

	ret

	.update_ui
		ld a, [WRAM_ENV_STEP]
		ld b, a
		sla a
		sla a
		add a, b
		ld h, 0
		ld l, a
		ld de, EnvelopeStepLengthTable
		add hl, de

		ld a, [hl]
		push hl
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_ENV_STEP + 15, a
		pop hl
		inc hl
		ld a, [hl]
		push hl
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_ENV_STEP + 16, a
		pop hl
		inc hl
		ld a, [hl]
		push hl
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_ENV_STEP + 17, a
		pop hl
		inc hl
		ld a, [hl]
		push hl
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_ENV_STEP + 18, a
		pop hl
		inc hl
		ld a, [hl]
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_ENV_STEP + 19, a

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateEnvDir:
	ProcessSelection LINE_ENV_STEP, LINE_ENV_DIR, LINE_SWEEP_STEP, SELECTION_ENV_STEP, SELECTION_SWEEP_STEP

	TestPadInput_PressedAny WRAM_PAD_INPUT, PADF_LEFT | PADF_RIGHT
	jr z, .left_right
		ld a, [WRAM_ENV_DIR]
		inc a
		and a, $01
		ld [WRAM_ENV_DIR], a
		jr .update_ui
	.left_right

	ret

	.update_ui
		ld a, [WRAM_ENV_DIR]
		sla a
		sla a
		ld h, 0
		ld l, a
		ld de, EnvelopeUpDownTable
		add hl, de

		ld a, [hl]
		push hl
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_ENV_DIR + 16, a
		pop hl
		inc hl
		ld a, [hl]
		push hl
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_ENV_DIR + 17, a
		pop hl
		inc hl
		ld a, [hl]
		push hl
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_ENV_DIR + 18, a
		pop hl
		inc hl
		ld a, [hl]
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_ENV_DIR + 19, a

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateSweepTime:
	ProcessSelection LINE_ENV_DIR, LINE_SWEEP_STEP, LINE_SWEEP_SHIFT, SELECTION_ENV_DIR, SELECTION_SWEEP_SHIFT

	TestPadInput_PressedAll WRAM_PAD_INPUT, PADF_LEFT
	jr nz, .left
		ld a, [WRAM_SWEEP_STEP]
		dec a
		and a, $07
		ld [WRAM_SWEEP_STEP], a
		jr .update_ui
	.left

	TestPadInput_PressedAll WRAM_PAD_INPUT, PADF_RIGHT
	jr nz, .right
		ld a, [WRAM_SWEEP_STEP]
		inc a
		and a, $07
		ld [WRAM_SWEEP_STEP], a
		jr .update_ui
	.right

	ret

	.update_ui
		ld a, [WRAM_SWEEP_STEP]
		sla a
		sla a
		ld h, 0
		ld l, a
		ld de, SweepTimeTable
		add hl, de

		ld a, [hl]
		push hl
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_SWEEP_STEP + 16, a
		pop hl
		inc hl
		ld a, [hl]
		push hl
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_SWEEP_STEP + 17, a
		pop hl
		inc hl
		ld a, [hl]
		push hl
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_SWEEP_STEP + 18, a
		pop hl
		inc hl
		ld a, [hl]
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_SWEEP_STEP + 19, a

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateSweepStep:
	ProcessSelection LINE_SWEEP_STEP, LINE_SWEEP_SHIFT, LINE_SWEEP_DIR, SELECTION_SWEEP_STEP, SELECTION_SWEEP_DIR

	TestPadInput_PressedAll WRAM_PAD_INPUT, PADF_LEFT
	jr nz, .left
		ld a, [WRAM_SWEEP_SHIFT]
		dec a
		and a, $07
		ld [WRAM_SWEEP_SHIFT], a
		jr .update_ui
	.left

	TestPadInput_PressedAll WRAM_PAD_INPUT, PADF_RIGHT
	jr nz, .right
		ld a, [WRAM_SWEEP_SHIFT]
		inc a
		and a, $07
		ld [WRAM_SWEEP_SHIFT], a
		jr .update_ui
	.right

	ret

	.update_ui
		ld a, [WRAM_SWEEP_SHIFT]
		ld h, 0
		ld l, a
		ld de, SweepStepCountTable
		add hl, de

		ld a, [hl]
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_SWEEP_SHIFT + 19, a

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateSweepDir:
	ProcessSelection LINE_SWEEP_SHIFT, LINE_SWEEP_DIR, LINE_NOTE, SELECTION_SWEEP_SHIFT, SELECTION_NOTE

	TestPadInput_PressedAny WRAM_PAD_INPUT, PADF_LEFT | PADF_RIGHT
	jr z, .left_right
		ld a, [WRAM_SWEEP_DIR]
		inc a
		and a, $01
		ld [WRAM_SWEEP_DIR], a
		jr .update_ui
	.left_right

	ret

	.update_ui
		ld a, [WRAM_SWEEP_DIR]
		ld b, a
		sla a
		add a, b
		ld h, 0
		ld l, a
		ld de, SweepAddSubTable
		add hl, de

		ld a, [hl]
		push hl
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_SWEEP_DIR + 17, a
		pop hl
		inc hl
		ld a, [hl]
		push hl
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_SWEEP_DIR + 18, a
		pop hl
		inc hl
		ld a, [hl]
		PushTransfer _SCRN0 + SCRN_VX_B * LINE_SWEEP_DIR + 19, a

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Public
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "ch1_public", rom0

InitializeCH1:
	xor a
	ld [WRAM_CONTROL_FLAGS], a
	ld [WRAM_SELECTION_INDEX], a

	PushTransfer _SCRN0 + SCRN_VX_B * 2, TILE_INDEX_CURSOR

	ld hl, WRAM_NOTE_NUMBER
	ld [hl], 24

	ld hl, WRAM_DUTY_INDEX
	ld [hl], 2

	ld hl, WRAM_LENGTH_INDEX
	ld [hl], LENGTH_COUNT - 1

	ld hl, WRAM_ENV_INIT
	ld [hl], 15
	xor a
	ld [WRAM_ENV_STEP], a
	ld [WRAM_ENV_DIR], a

	ld hl, WRAM_SWEEP_SHIFT
	ld [hl], 7
	xor a
	ld [WRAM_SWEEP_STEP], a
	ld [WRAM_SWEEP_DIR], a

	; init the sound
	copy [rNR52], AUDENA_ON
	copy [rNR50], $77
	copy [rNR51], $FF

	; init graphics
	copy [rBGP], %11100100

	; enable interrupts
	copy [rIE], IEF_VBLANK
	ei

	; set the graphics parameters and turn back LCD on
	copy [rLCDC], LCDCF_ON | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_BGON

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateCH1:
	halt

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	; vblank
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	ProcessTransferList

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	; logic
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	UpdatePadInput WRAM_PAD_INPUT

	; call the proper menu update function
	ld a, [WRAM_SELECTION_INDEX]
	sla a
	ld_r16_r8 hl, a
	ld de, UpdateFunc
	add hl, de
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld de, .call_return_address
	push de
	jp hl
	.call_return_address

	; request to play a sound based on the parameters
	TestPadInput_PressedAll WRAM_PAD_INPUT, PADF_A
	jp nz, .request_play_sound
		ld hl, WRAM_CONTROL_FLAGS
		set CONTROL_FLAG_PLAY_SOUND, [hl]
	.request_play_sound

	; set the sweep parameters
	ld a, [WRAM_SWEEP_STEP]
	or a
	jr nz, .check_sweep_params
		ld a, AUD1SWEEP_DOWN
		jr .set_sweep
	.check_sweep_params
	swap a
	ld b, a

	ld a, [WRAM_SWEEP_DIR]
	sla a
	sla a
	sla a
	ld c, a

	ld a, [WRAM_SWEEP_SHIFT]

	or a, b
	or a, c
	.set_sweep
	ld [WRAM_CH1_REGISTER + 0], a

	DisplayRegisterA 15, 7

	; set the duty and length
	ld a, [WRAM_DUTY_INDEX]
	sla a
	sla a
	swap a
	ld b, a

	ld a, LENGTH_COUNT - 1
	ld hl, WRAM_LENGTH_INDEX
	sub a, [hl]
	and a, $3F

	or a, b
	ld [WRAM_CH1_REGISTER + 1], a

	DisplayRegisterA 15, 17

	; set the envelope parameters
	ld a, [WRAM_ENV_INIT]
	swap a
	ld b, a

	ld a, [WRAM_ENV_DIR]
	sla a
	sla a
	sla a
	ld c, a

	ld a, [WRAM_ENV_STEP]

	or a, b
	or a, c
	ld [WRAM_CH1_REGISTER + 2], a

	DisplayRegisterA 16, 7

	; get a pointer to the note to play
	ld a, [WRAM_NOTE_NUMBER]
	ld c, a
	sla a
	ld h, 0
	ld l, a
	sla l
	rl h
	sla l
	rl h

	ld a, c
	cpl
	inc a
	ld c, a
	ld a, $FF
	adc a, 0
	ld b, a

	add hl, bc
	ld de, NoteTable + NOTE_FREQUENCY_CH124
	add hl, de

	; load the frequency low bits
	ld a, [hli]
	ld [WRAM_CH1_REGISTER + 3], a

	push hl
	DisplayRegisterA 16, 17
	pop hl

	; load the frequency high bits and set the start/length flags
	ld b, $C0
	ld a, [WRAM_LENGTH_INDEX]
	or a, a
	jr nz, .length_off
		ld b, $80
	.length_off

	ld a, [hl]
	or a, b
	ld [WRAM_CH1_REGISTER + 4], a

	DisplayRegisterA 17, 7

	; play sound if requested
	ld hl, WRAM_CONTROL_FLAGS
	bit CONTROL_FLAG_PLAY_SOUND, [hl]
	jp z, .play_sound
		ld hl, WRAM_CONTROL_FLAGS
		res CONTROL_FLAG_PLAY_SOUND, [hl]

		copy [rNR10], [WRAM_CH1_REGISTER + 0]
		copy [rNR11], [WRAM_CH1_REGISTER + 1]
		copy [rNR12], [WRAM_CH1_REGISTER + 2]
		copy [rNR13], [WRAM_CH1_REGISTER + 3]
		copy [rNR14], [WRAM_CH1_REGISTER + 4]
	.play_sound

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FinalizeCH1:
	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

export InitializeCH1, UpdateCH1, FinalizeCH1

