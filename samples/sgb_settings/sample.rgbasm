include "utils.rgbinc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Interrupts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "vblank_interrupt", rom0[$0040]
    reti

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Graphics
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "graphics", rom0

graphics_data:
incbin "tileset.chr"
incbin "sgb_settings.tlm"
graphics_data_end:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; VRAM vblank transfer
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "transfer", rom0

def TRANSFER_LIST_MAX_SIZE          equ (16)
assert (TRANSFER_LIST_MAX_SIZE & (TRANSFER_LIST_MAX_SIZE - 1)) == 0, "TRANSFER_LIST_MAX_SIZE should be a power of two"

rsreset
def TRANSFER_TILEMAP_ADDRESS        rw 1
def TRANSFER_TILE_INDEX             rb 1
def sizeof_TRANSFER                 rb 0

rsreset
def TRANSFER_LIST_LEN               rb 1
def TRANSFER_LIST_NEXT              rw 1
def TRANSFER_LIST_DATA              rb TRANSFER_LIST_MAX_SIZE * sizeof_TRANSFER
def sizeof_TRANSFER_LIST            rb 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

macro ResetTransferList
    ld hl, WRAM_TRANSFER_LIST + TRANSFER_LIST_LEN
    ld [hl], 0
    ld hl, WRAM_TRANSFER_LIST + TRANSFER_LIST_NEXT
    ld [hl], low(WRAM_TRANSFER_LIST + TRANSFER_LIST_DATA)
    inc hl
    ld [hl], high(WRAM_TRANSFER_LIST + TRANSFER_LIST_DATA)
endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

rsreset
def PUSH_TRANSFER_PARAM_TILEMAP_PTR rw 1
def PUSH_TRANSFER_PARAM_TILE_INDEX  rb 1
def sizeof_PUSH_TRANSFER_PARAM      rb 0

; push a single transfer into the transfer list
PushTransferFunc:
    ; skip the transfer if the list is full
    ld hl, WRAM_TRANSFER_LIST + TRANSFER_LIST_LEN
    ld a, [hl]
    cp a, TRANSFER_LIST_MAX_SIZE
    ret z

    ; increment the list size
    inc a
    ld [hl], a

    ; read the tilemap address into (bc)
    ld hl, sp + 2 + PUSH_TRANSFER_PARAM_TILEMAP_PTR
    ld a, [hli]
    ld c, a
    ld a, [hli]
    ld b, a

    ; read the tile index into (e)
    ld e, [hl]

    ; get a pointer to the transfer list next element in (hl)
    ld hl, WRAM_TRANSFER_LIST + TRANSFER_LIST_NEXT
    ld a, [hli]
    ld h, [hl]
    ld l, a

    ; push the transfer data into the list
    ld [hl], c
    inc hl
    ld [hl], b
    inc hl
    ld [hl], e

    ; compute and store the update next pointer value
    inc hl
    ld a, low(hl)
    ld [WRAM_TRANSFER_LIST + TRANSFER_LIST_NEXT + 0], a
    ld a, high(hl)
    ld [WRAM_TRANSFER_LIST + TRANSFER_LIST_NEXT + 1], a

    ret

; helper macro for PushTransferFunc
; \1 = tilemap address, \2 = tile index
macro PushTransfer
    ld d, high(\1)
    ld e, low(\1)
    add sp, -sizeof_PUSH_TRANSFER_PARAM
    ld hl, sp + 0
    ld [hl], e
    inc hl
    ld [hl], d
    inc hl
    ld [hl], \2
    call PushTransferFunc
    add sp, sizeof_PUSH_TRANSFER_PARAM
endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; perform all the requested transfers
macro ProcessTransferList
    ld a, [WRAM_TRANSFER_LIST + TRANSFER_LIST_LEN]
    or a, a
    jr z, .end\@

    ld c, a
    ld hl, WRAM_TRANSFER_LIST + TRANSFER_LIST_DATA
    .loop\@
        ld a, [hli]
        ld e, a
        ld a, [hli]
        ld d, a
        ld a, [hli]
        push hl
        ld h, d
        ld l, e
        ld [hl], a
        pop hl

        dec c
        jr nz, .loop\@

    ResetTransferList
    .end\@
endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SGB
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "sgb", rom0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; constants
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

def SGB_BYTES_PER_PACKET            equ (16)

def COMMAND_PAL01                   equ ($00)
def COMMAND_PAL23                   equ ($01)
def COMMAND_PAL03                   equ ($02)
def COMMAND_PAL12                   equ ($03)
def COMMAND_ATTR_BLK                equ ($04)
def COMMAND_ATTR_LIN                equ ($05)
def COMMAND_ATTR_DIV                equ ($06)
def COMMAND_ATTR_CHR                equ ($07)
def COMMAND_SOUND                   equ ($08)
def COMMAND_SOU_TRN                 equ ($09)
def COMMAND_PAL_SET                 equ ($0A)
def COMMAND_PAL_TRN                 equ ($0B)
def COMMAND_ATRC_EN                 equ ($0C)
def COMMAND_ICON_EN                 equ ($0E)
def COMMAND_DATA_SND                equ ($0F)
def COMMAND_DATA_TRN                equ ($10)
def COMMAND_MLT_REQ                 equ ($11)
def COMMAND_JUMP                    equ ($12)
def COMMAND_CHR_TRN                 equ ($13)
def COMMAND_PCT_TRN                 equ ($14)
def COMMAND_ATTR_TRN                equ ($15)
def COMMAND_ATTR_SET                equ ($16)
def COMMAND_MASK_EN                 equ ($17)
def COMMAND_PAL_PRI                 equ ($19)

def PAL01                           equ ((COMMAND_PAL01 << 3) | 1)
def PAL23                           equ ((COMMAND_PAL23 << 3) | 1)
def PAL03                           equ ((COMMAND_PAL03 << 3) | 1)
def PAL12                           equ ((COMMAND_PAL12 << 3) | 1)
def ATTR_BLK_1                      equ ((COMMAND_ATTR_BLK << 3) | 1)
def ATTR_BLK_2                      equ ((COMMAND_ATTR_BLK << 3) | 2)
def ATTR_BLK_3                      equ ((COMMAND_ATTR_BLK << 3) | 3)
def ATTR_BLK_4                      equ ((COMMAND_ATTR_BLK << 3) | 4)
def ATTR_BLK_5                      equ ((COMMAND_ATTR_BLK << 3) | 5)
def ATTR_BLK_6                      equ ((COMMAND_ATTR_BLK << 3) | 6)
def ATTR_BLK_7                      equ ((COMMAND_ATTR_BLK << 3) | 7)
def ATTR_LIN_1                      equ ((COMMAND_ATTR_LIN << 3) | 1)
def ATTR_LIN_2                      equ ((COMMAND_ATTR_LIN << 3) | 2)
def ATTR_LIN_3                      equ ((COMMAND_ATTR_LIN << 3) | 3)
def ATTR_LIN_4                      equ ((COMMAND_ATTR_LIN << 3) | 4)
def ATTR_LIN_5                      equ ((COMMAND_ATTR_LIN << 3) | 5)
def ATTR_LIN_6                      equ ((COMMAND_ATTR_LIN << 3) | 6)
def ATTR_LIN_7                      equ ((COMMAND_ATTR_LIN << 3) | 7)
def ATTR_DIV                        equ ((COMMAND_ATTR_DIV << 3) | 1)
def ATTR_CHR_1                      equ ((COMMAND_ATTR_CHR << 3) | 1)
def ATTR_CHR_2                      equ ((COMMAND_ATTR_CHR << 3) | 2)
def ATTR_CHR_3                      equ ((COMMAND_ATTR_CHR << 3) | 3)
def ATTR_CHR_4                      equ ((COMMAND_ATTR_CHR << 3) | 4)
def ATTR_CHR_5                      equ ((COMMAND_ATTR_CHR << 3) | 5)
def ATTR_CHR_6                      equ ((COMMAND_ATTR_CHR << 3) | 6)
def SOUND                           equ ((COMMAND_SOUND << 3) | 1)
def SOU_TRN                         equ ((COMMAND_SOU_TRN << 3) | 1)
def PAL_SET                         equ ((COMMAND_PAL_SET << 3) | 1)
def PAL_TRN                         equ ((COMMAND_PAL_TRN << 3) | 1)
def ATRC_EN                         equ ((COMMAND_ATRC_EN << 3) | 1)
def ICON_EN                         equ ((COMMAND_ICON_EN << 3) | 1)
def DATA_SND                        equ ((COMMAND_DATA_SND << 3) | 1)
def DATA_TRN                        equ ((COMMAND_DATA_TRN << 3) | 1)
def MLT_REQ                         equ ((COMMAND_MLT_REQ << 3) | 1)
def JUMP                            equ ((COMMAND_JUMP << 3) | 1)
def CHR_TRN                         equ ((COMMAND_CHR_TRN << 3) | 1)
def PCT_TRN                         equ ((COMMAND_PCT_TRN << 3) | 1)
def ATTR_TRN                        equ ((COMMAND_ATTR_TRN << 3) | 1)
def ATTR_SET                        equ ((COMMAND_ATTR_SET << 3) | 1)
def MASK_EN                         equ ((COMMAND_MASK_EN << 3) | 1)
def PAL_PRI                         equ ((COMMAND_PAL_PRI << 3) | 1)

def PADDING                         equ ($00)

def MASK_EN_CANCEL                  equ ($00)
def MASK_EN_FREEZE                  equ ($01)
def MASK_EN_BLACK                   equ ($02)
def MASK_EN_COLOR0                  equ ($03)

def ATTR_BLK_CONTROL_NONE           equ ($00)
def ATTR_BLK_CONTROL_INSIDE         equ ($01)
def ATTR_BLK_CONTROL_BORDER         equ ($02)
def ATTR_BLK_CONTROL_OUTSIDE        equ ($04)
def ATTR_BLK_CONTROL_ALL            equ (ATTR_BLK_CONTROL_INSIDE | ATTR_BLK_CONTROL_BORDER | ATTR_BLK_CONTROL_OUTSIDE)
def ATTR_BLK_OUTSIDE_PALETTE_0      equ (0 << 4)
def ATTR_BLK_OUTSIDE_PALETTE_1      equ (1 << 4)
def ATTR_BLK_OUTSIDE_PALETTE_2      equ (2 << 4)
def ATTR_BLK_OUTSIDE_PALETTE_3      equ (3 << 4)
def ATTR_BLK_BORDER_PALETTE_0       equ (0 << 2)
def ATTR_BLK_BORDER_PALETTE_1       equ (1 << 2)
def ATTR_BLK_BORDER_PALETTE_2       equ (2 << 2)
def ATTR_BLK_BORDER_PALETTE_3       equ (3 << 2)
def ATTR_BLK_INSIDE_PALETTE_0       equ (0 << 0)
def ATTR_BLK_INSIDE_PALETTE_1       equ (1 << 0)
def ATTR_BLK_INSIDE_PALETTE_2       equ (2 << 0)
def ATTR_BLK_INSIDE_PALETTE_3       equ (3 << 0)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; initialization packets
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SgbPackets_CoreInit:
; mandatory initial commands
db DATA_SND, $5D, $08, $00, $0B, $8C, $D0, $F4, $60, $00, $00, $00, $00, $00, $00, $00
db DATA_SND, $52, $08, $00, $0B, $A9, $E7, $9F, $01, $C0, $7E, $E8, $E8, $E8, $E8, $E0
db DATA_SND, $47, $08, $00, $0B, $C4, $D0, $16, $A5, $CB, $C9, $05, $D0, $10, $A2, $28
db DATA_SND, $3C, $08, $00, $0B, $F0, $12, $A5, $C9, $C9, $C8, $D0, $1C, $A5, $CA, $C9
db DATA_SND, $31, $08, $00, $0B, $0C, $A5, $CA, $C9, $7E, $D0, $06, $A5, $CB, $C9, $7E
db DATA_SND, $26, $08, $00, $0B, $39, $CD, $48, $0C, $D0, $34, $A5, $C9, $C9, $80, $D0
db DATA_SND, $1B, $08, $00, $0B, $EA, $EA, $EA, $EA, $EA, $A9, $01, $CD, $4F, $0C, $D0
db DATA_SND, $10, $08, $00, $0B, $4C, $20, $08, $EA, $EA, $EA, $EA, $EA, $60, $EA, $EA
; optional initial commands for SOU_TRN
db DATA_SND, $00, $09, $00, $0B, $AD, $C2, $02, $C9, $09, $D0, $1A, $A9, $01, $8D, $00
db DATA_SND, $0B, $09, $00, $0B, $42, $AF, $DB, $FF, $00, $F0, $05, $20, $73, $C5, $80
db DATA_SND, $16, $09, $00, $0B, $03, $20, $76, $C5, $A9, $31, $8D, $00, $42, $68, $68
db DATA_SND, $21, $09, $00, $01, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
db DATA_SND, $00, $08, $00, $03, $4C, $00, $09, $00, $00, $00, $00, $00, $00, $00, $00
SgbPackets_CoreInit_End:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; MASK_EN packets
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; \1 = mask type
macro SgbPacket_MaskEn
db MASK_EN, \1
ds 14, PADDING
endm

SgbPacket_MaskEn_Cancel:
    SgbPacket_MaskEn MASK_EN_CANCEL

SgbPacket_MaskEn_Freeze:
    SgbPacket_MaskEn MASK_EN_FREEZE

SgbPacket_MaskEn_Black:
    SgbPacket_MaskEn MASK_EN_BLACK

SgbPacket_MaskEn_Color0:
    SgbPacket_MaskEn MASK_EN_COLOR0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Color packets
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SgbPacket_Palette01:
db PAL01
dw $7BDE, $56B5, $2D6B, $0421
dw        $03EF, $0200, $1D66
db PADDING

SgbPacket_AttrBlk:
db ATTR_BLK_1
db 1 ; number of square
db ATTR_BLK_CONTROL_ALL
db ATTR_BLK_OUTSIDE_PALETTE_0 | ATTR_BLK_BORDER_PALETTE_1 | ATTR_BLK_INSIDE_PALETTE_1
db 9, 13, 10, 16 ; square coordinates
ds 8, PADDING

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Wait function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; \1 = number of frames to wait
macro WaitFrames
    push bc
    push de
    ld c, \1
    call _WaitFrames
    pop de
    pop bc
endm

_WaitFrames:
    ; (c) holds the number of frames to wait
    .all_frames
        ld de, 1756
        .single_frame
            nop
            nop
            nop
            dec de
            ld a, d
            or a, e
            jr nz, .single_frame
        dec c
        jr nz, .all_frames
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Command
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

macro SendCommand
    ld hl, \1
    call _SendCommand
endm

_SendPacket:
    ; packet start marker
    xor a
    ldh [rP1], a
    ld a, P1F_GET_NONE
    ldh [rP1], a

    ; send the bytes of the packet
    ld b, SGB_BYTES_PER_PACKET
    .send_byte
        ld e, [hl]
        inc hl

        ; send the bits of the byte 
        ld d, 8
        .send_bit
            rrc e
            ld a, P1F_4     ; one
            jr c, .pulse
                ld a, P1F_5 ; zero
            .pulse
            ldh [rP1], a
            ld a, P1F_GET_NONE
            ldh [rP1], a

            dec d
            jr nz, .send_bit

        dec b
        jr nz, .send_byte

    ; sentinel
    ld a, P1F_5
    ldh [rP1], a
    ld a, P1F_GET_NONE
    ldh [rP1], a

    ; wait for about 60 ms
    WaitFrames 4
    ret

_SendCommand:
    ; get the command header
    ld a, [hl]
    push af

    ; retrieve the number of packets in the command
    and a, $07

    ; check that there is at least one packet
    ret z

    ; send the packets of the command
    ld c, a
    .send_packet
        call _SendPacket
        dec c
        jr nz, .send_packet

    ; retrieve the command type
    pop af
    srl a
    srl a
    srl a

    ; check whether the command is using a 4KB payload
    cp a, COMMAND_SOU_TRN
    jr z, .4KB_command
    cp a, COMMAND_PAL_TRN
    jr z, .4KB_command
    cp a, COMMAND_DATA_TRN
    jr z, .4KB_command
    cp a, COMMAND_CHR_TRN
    jr z, .4KB_command
    cp a, COMMAND_PCT_TRN
    jr z, .4KB_command
    cp a, COMMAND_ATTR_TRN
    jr z, .4KB_command

    ; not a 4KB command
    ret

    .4KB_command
    ; wait extra frames for completion of 4KB commands
    WaitFrames 2

    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SGB initialization
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PerformCustomInitialization:
    SendCommand SgbPacket_Palette01
    SendCommand SgbPacket_AttrBlk
    ret

InitializeSgbDevice:
    WaitFrames 60
    SendCommand SgbPacket_MaskEn_Freeze

def COMMAND_INDEX = 0
rept ((SgbPackets_CoreInit_End - SgbPackets_CoreInit) / SGB_BYTES_PER_PACKET)
    SendCommand SgbPackets_CoreInit + COMMAND_INDEX
def COMMAND_INDEX += SGB_BYTES_PER_PACKET
endr

    call PerformCustomInitialization

    WaitFrames 1
    SendCommand SgbPacket_MaskEn_Cancel
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; WRAM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

def ICON_EN_MASK_PALETTE        equ ($01)
def ICON_EN_MASK_CONTROLLER     equ ($02)
def ICON_EN_MASK_COMMAND        equ ($04)

rsset _RAM

def WRAM_PAD_INPUT                  rb sizeof_PAD_INPUT

def WRAM_SELECTION_INDEX            rb 1
def WRAM_TRANSFER_LIST              rb sizeof_TRANSFER_LIST

def WRAM_ATRC_EN_PACKET             rb SGB_BYTES_PER_PACKET
def WRAM_ICON_EN_PACKET             rb SGB_BYTES_PER_PACKET
def WRAM_PAL_PRI_PACKET             rb SGB_BYTES_PER_PACKET

def WRAM_ATRC_EN_FLAG               rb 1
def WRAM_ICON_EN_FLAG               rb 1
def WRAM_PAL_PRI_FLAG               rb 1

def WRAM_END                        rb 0

; sanity checks
def WRAM_USAGE                      equ (WRAM_END - _RAM)
println "WRAM usage: {d:WRAM_USAGE} bytes"
assert WRAM_USAGE <= $2000, "Too many bytes used in WRAM"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Hexadecimal to tile conversion
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "hexadecimal", rom0

HexToTileTable:
db $50, $51, $52, $53
db $54, $55, $56, $57
db $58, $59, $61, $62
db $63, $64, $65, $66

; convert (a) from hexadecimal to a tile index
macro HexToTileA
    ld h, 0
    ld l, a
    ld de, HexToTileTable
    add hl, de
    ld a, [hl]
endm

; \1 = line, \2 = column
macro DisplayRegisterA
    push af
    swap a
    and a, $0F
    HexToTileA
    PushTransfer _SCRN0 + SCRN_VX_B * \1 + \2, a
    pop af
    and a, $0F
    HexToTileA
    PushTransfer _SCRN0 + SCRN_VX_B * \1 + \2 + 1, a
endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Update functions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

def TILE_INDEX_BLANK        equ ($40)
def TILE_INDEX_CURSOR       equ ($4A)
def TILE_INDEX_ZERO         equ ($50)

; update functions table
UpdateFunc:
dw UpdateAtrcEn
dw UpdateIconEnPalette
dw UpdateIconEnController
dw UpdateIconEnCommand
dw UpdatePalPri
UpdateFunc_End:

; line numbers
def LINE_ATRC_EN                    equ (3)
def LINE_ICON_EN_PALETTE            equ (5)
def LINE_ICON_EN_CONTROLLER         equ (6)
def LINE_ICON_EN_COMMAND            equ (7)
def LINE_PAL_PRI                    equ (9)

; selection indices
rsreset
def SELECTION_ATRC_EN                   rb 1
def SELECTION_ICON_EN_PALETTE           rb 1
def SELECTION_ICON_EN_CONTROLLER        rb 1
def SELECTION_ICON_EN_COMMAND           rb 1
def SELECTION_PAL_PRI                   rb 1
def SELECTIONS_COUNT                    rb 0
assert SELECTIONS_COUNT == ((UpdateFunc_End - UpdateFunc) / 2), "The number of selections is not in sync with the number of update functions"

section "update", rom0

; macro to handle the menu navigation
; \1 = previous line, \2 = current line, \3 = next line
; \4 = previous index, \5 = next index
macro ProcessSelection
    TestPadInput_Pressed WRAM_PAD_INPUT, PADF_DOWN
    jr nz, .down\@
        PushTransfer _SCRN0 + SCRN_VX_B * \2 + 1, TILE_INDEX_BLANK
        PushTransfer _SCRN0 + SCRN_VX_B * \3 + 1, TILE_INDEX_CURSOR
        ld hl, WRAM_SELECTION_INDEX
        ld [hl], \5
    .down\@

    TestPadInput_Pressed WRAM_PAD_INPUT, PADF_UP
    jr nz, .up\@
        PushTransfer _SCRN0 + SCRN_VX_B * \2 + 1, TILE_INDEX_BLANK
        PushTransfer _SCRN0 + SCRN_VX_B * \1 + 1, TILE_INDEX_CURSOR
        ld hl, WRAM_SELECTION_INDEX
        ld [hl], \4
    .up\@
endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateAtrcEn:
    ProcessSelection LINE_PAL_PRI, LINE_ATRC_EN, LINE_ICON_EN_PALETTE, SELECTION_PAL_PRI, SELECTION_ICON_EN_PALETTE

    TestPadInput_PressedAny WRAM_PAD_INPUT, PADF_LEFT | PADF_RIGHT
    jr z, .toggle
        ld a, [WRAM_ATRC_EN_FLAG]
        xor a, $01
        ld [WRAM_ATRC_EN_FLAG], a
        call SendAtrcEnCommand
        jr .update_ui
    .toggle

    ret

    .update_ui
        ld a, [WRAM_ATRC_EN_FLAG]
        add a, TILE_INDEX_ZERO
        PushTransfer _SCRN0 + SCRN_VX_B * LINE_ATRC_EN + 17, a

    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateIconEnPalette:
    ProcessSelection LINE_ATRC_EN, LINE_ICON_EN_PALETTE, LINE_ICON_EN_CONTROLLER, SELECTION_ATRC_EN, SELECTION_ICON_EN_CONTROLLER

    TestPadInput_PressedAny WRAM_PAD_INPUT, PADF_LEFT | PADF_RIGHT
    jr z, .toggle
        ld a, [WRAM_ICON_EN_FLAG]
        xor a, ICON_EN_MASK_PALETTE
        ld [WRAM_ICON_EN_FLAG], a
        call SendIconEnCommand
        jr .update_ui
    .toggle

    ret

    .update_ui
        ld a, [WRAM_ICON_EN_FLAG]
        and a, ICON_EN_MASK_PALETTE
        jr z, .zero
            ld a, 1
        .zero
        add a, TILE_INDEX_ZERO
        PushTransfer _SCRN0 + SCRN_VX_B * LINE_ICON_EN_PALETTE + 17, a

    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateIconEnController:
    ProcessSelection LINE_ICON_EN_PALETTE, LINE_ICON_EN_CONTROLLER, LINE_ICON_EN_COMMAND, SELECTION_ICON_EN_PALETTE, SELECTION_ICON_EN_COMMAND

    TestPadInput_PressedAny WRAM_PAD_INPUT, PADF_LEFT | PADF_RIGHT
    jr z, .toggle
        ld a, [WRAM_ICON_EN_FLAG]
        xor a, ICON_EN_MASK_CONTROLLER
        ld [WRAM_ICON_EN_FLAG], a
        call SendIconEnCommand
        jr .update_ui
    .toggle

    ret

    .update_ui
        ld a, [WRAM_ICON_EN_FLAG]
        and a, ICON_EN_MASK_CONTROLLER
        jr z, .zero
            ld a, 1
        .zero
        add a, TILE_INDEX_ZERO
        PushTransfer _SCRN0 + SCRN_VX_B * LINE_ICON_EN_CONTROLLER + 17, a

    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateIconEnCommand:
    ProcessSelection LINE_ICON_EN_CONTROLLER, LINE_ICON_EN_COMMAND, LINE_PAL_PRI, SELECTION_ICON_EN_CONTROLLER, SELECTION_PAL_PRI

    TestPadInput_PressedAny WRAM_PAD_INPUT, PADF_LEFT | PADF_RIGHT
    jr z, .toggle
        ld a, [WRAM_ICON_EN_FLAG]
        xor a, ICON_EN_MASK_COMMAND
        ld [WRAM_ICON_EN_FLAG], a
        call SendIconEnCommand
        jr .update_ui
    .toggle

    ret

    .update_ui
        ld a, [WRAM_ICON_EN_FLAG]
        and a, ICON_EN_MASK_COMMAND
        jr z, .zero
            ld a, 1
        .zero
        add a, TILE_INDEX_ZERO
        PushTransfer _SCRN0 + SCRN_VX_B * LINE_ICON_EN_COMMAND + 17, a

    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdatePalPri:
    ProcessSelection LINE_ICON_EN_COMMAND, LINE_PAL_PRI, LINE_ATRC_EN, SELECTION_ICON_EN_COMMAND, SELECTION_ATRC_EN

    TestPadInput_PressedAny WRAM_PAD_INPUT, PADF_LEFT | PADF_RIGHT
    jr z, .toggle
        ld a, [WRAM_PAL_PRI_FLAG]
        xor a, $01
        ld [WRAM_PAL_PRI_FLAG], a
        call SendPalPriCommand
        jr .update_ui
    .toggle

    TestPadInput_PressedAny WRAM_PAD_INPUT, PADF_A
    jr z, .update_palette
        SendCommand SgbPacket_Palette01
        SendCommand SgbPacket_AttrBlk
    .update_palette

    ret

    .update_ui
        ld a, [WRAM_PAL_PRI_FLAG]
        add a, TILE_INDEX_ZERO
        PushTransfer _SCRN0 + SCRN_VX_B * LINE_PAL_PRI + 17, a

    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Sample
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "sample", rom0

InitSample:
    ClearMemory _RAM, WRAM_USAGE
    InitPadInput WRAM_PAD_INPUT
    ResetTransferList
    PushTransfer _SCRN0 + SCRN_VX_B * 3 + 1, TILE_INDEX_CURSOR

    copy [WRAM_ATRC_EN_PACKET], ATRC_EN
    copy [WRAM_ICON_EN_PACKET], ICON_EN
    copy [WRAM_PAL_PRI_PACKET], PAL_PRI

    copy [rBGP], %11100100
    CopyMemory _VRAM8000, graphics_data, graphics_data_end - graphics_data

    copy [rIE], IEF_VBLANK
    ei

    copy [rLCDC], LCDCF_ON | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_BGON

    ld a, [HARDWARE_MODEL_REGISTER]
    cp a, HARDWARE_MODEL_SGB
    call z, InitializeSgbDevice

    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SendAtrcEnCommand:
    copy [WRAM_ATRC_EN_PACKET + 1], [WRAM_ATRC_EN_FLAG]
    SendCommand WRAM_ATRC_EN_PACKET
    ret

SendIconEnCommand:
    copy [WRAM_ICON_EN_PACKET + 1], [WRAM_ICON_EN_FLAG]
    SendCommand WRAM_ICON_EN_PACKET
    ret

SendPalPriCommand:
    copy [WRAM_PAL_PRI_PACKET + 1], [WRAM_PAL_PRI_FLAG]
    SendCommand WRAM_PAL_PRI_PACKET
    ret

UpdateSample:
    halt

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; vblank
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ProcessTransferList

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; logic
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ld a, [HARDWARE_MODEL_REGISTER]
    cp a, HARDWARE_MODEL_DMG
    ret z

    UpdatePadInput WRAM_PAD_INPUT

    ; call the proper menu update function
    ld a, [WRAM_SELECTION_INDEX]
    sla a
    ld h, 0
    ld l, a
    ld de, UpdateFunc
    add hl, de
    ld a, [hli]
    ld h, [hl]
    ld l, a
    ld de, .call_return_address
    push de
    jp hl
    .call_return_address

    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

export InitSample, UpdateSample

