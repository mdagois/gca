include "utils.rgbinc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "vblank_interrupt", rom0[$0040]
	push af
	ld a, 1
	ld [WRAM_IS_VBLANK], a
	pop af
	reti

section "joypad_interrupt", rom0[$0060]
joypad_interrupt:
	push af
	push hl

	; counter update
	ld hl, WRAM_INPUT_COUNTER
	inc [hl]

	; bits' tile indices update
	ld a, [rP1]

	ld hl, WRAM_P1_BITS
	ld [hl], TILE_UI_NUMBER_0 + 1
	bit 0, a
	jr nz, .skip_bit_0
		ld [hl], TILE_UI_NUMBER_0
	.skip_bit_0

	inc hl
	ld [hl], TILE_UI_NUMBER_0 + 1
	bit 1, a
	jr nz, .skip_bit_1
		ld [hl], TILE_UI_NUMBER_0
	.skip_bit_1

	inc hl
	ld [hl], TILE_UI_NUMBER_0 + 1
	bit 2, a
	jr nz, .skip_bit_2
		ld [hl], TILE_UI_NUMBER_0
	.skip_bit_2

	inc hl
	ld [hl], TILE_UI_NUMBER_0 + 1
	bit 3, a
	jr nz, .skip_bit_3
		ld [hl], TILE_UI_NUMBER_0
	.skip_bit_3

	pop hl
	pop af
	reti

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

def TILE_UI_NUMBER_0				equ (80)

def TILES_COUNT						equ (384)
def BYTES_PER_TILE					equ (16)
def TILES_BYTE_SIZE					equ (TILES_COUNT * BYTES_PER_TILE)

def TILEMAPS_COUNT					equ (1)
def BYTES_PER_TILEMAP				equ (1024)
def TILEMAPS_BYTE_SIZE				equ (TILEMAPS_COUNT * BYTES_PER_TILEMAP)

def GRAPHICS_DATA_SIZE				equ (TILES_BYTE_SIZE + TILEMAPS_BYTE_SIZE)
def GRAPHICS_DATA_ADDRESS_END		equ ($8000)
def GRAPHICS_DATA_ADDRESS_START		equ (GRAPHICS_DATA_ADDRESS_END - GRAPHICS_DATA_SIZE)

; load the graphics data from ROM to VRAM
macro LoadGraphicsDataIntoVRAM
	ld de, GRAPHICS_DATA_ADDRESS_START
	ld hl, _VRAM8000
	.load_tile\@
		ld a, [de]
		inc de
		ld [hli], a
		ld a, d
		cp a, high(GRAPHICS_DATA_ADDRESS_END)
		jr nz, .load_tile\@
endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

rsset _RAM

def WRAM_IS_VBLANK					rb 1

def WRAM_INPUT_COUNTER				rb 1

def WRAM_HUNDREDS_TILE				rb 1
def WRAM_TENS_TILE					rb 1
def WRAM_UNITS_TILE					rb 1

def WRAM_P1_BITS					rb 4

def WRAM_END						rb 0

; sanity checks
def WRAM_USAGE						equ (WRAM_END - _RAM)
println "WRAM usage: {d:WRAM_USAGE} bytes"
assert WRAM_USAGE <= $2000, "Too many bytes used in WRAM"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "sample", rom0

InitSample:
	; init the WRAM state
	xor a
	ld [WRAM_INPUT_COUNTER], a
	ld [WRAM_IS_VBLANK], a

	ld a, TILE_UI_NUMBER_0
	ld [WRAM_HUNDREDS_TILE], a
	ld [WRAM_TENS_TILE], a
	ld [WRAM_UNITS_TILE], a

	ld a, TILE_UI_NUMBER_0 + 1
	ld [WRAM_P1_BITS + 0], a
	ld [WRAM_P1_BITS + 1], a
	ld [WRAM_P1_BITS + 2], a
	ld [WRAM_P1_BITS + 3], a

	; init the palette
	ld a, %11100100
	ld [rBGP], a

	LoadGraphicsDataIntoVRAM

	; choose which key will trigger an interrupt
	ld a, 0				;all keys
	;ld a, P1F_GET_BTN	;buttons only
	;ld a, P1F_GET_DPAD	;d-pad only
	ld [rP1], a

	; enable interrupts
	ld a, IEF_HILO | IEF_VBLANK
	ld [rIE], a
	ei

	; set the graphics parameters and turn back LCD on
	ld a, LCDCF_ON | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_BGON
	ld [rLCDC], a

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateSample:
	ld hl, WRAM_IS_VBLANK
	xor a
	.wait_vblank
		halt
		cp a, [hl]
		jr z, .wait_vblank
		ld [hl], a

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	; vblank
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	; update counter's tiles
	ld hl, _SCRN0 + (7 * SCRN_VX_B) + 13
	ld a, [WRAM_HUNDREDS_TILE]
	ld [hli], a
	ld a, [WRAM_TENS_TILE]
	ld [hli], a
	ld a, [WRAM_UNITS_TILE]
	ld [hli], a

	; update bits' tiles
	ld hl, _SCRN0 + (9 * SCRN_VX_B) + 12
	ld a, [WRAM_P1_BITS + 0]
	ld [hli], a
	ld a, [WRAM_P1_BITS + 1]
	ld [hli], a
	ld a, [WRAM_P1_BITS + 2]
	ld [hli], a
	ld a, [WRAM_P1_BITS + 3]
	ld [hli], a

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	; logic
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	ld a, [WRAM_INPUT_COUNTER]

	; compute the hundreds into (b)
	; (a) is also updated to remove the hundreds
	ld b, $FF
	.hundreds
		inc b
		sub a, 100
	jr nc, .hundreds
	add a, 100

	; set up the tile id for the hundreds
	ld c, a
	ld a, TILE_UI_NUMBER_0
	add a, b
	ld [WRAM_HUNDREDS_TILE], a	
	ld a, c
	
	; compute the tens into (b)
	; (a) is also updated to remove the tens
	ld b, $FF
	.tens
		inc b
		sub a, 10
	jr nc, .tens
	add a, 10
	
	; set up the tile id for the tens
	ld c, a
	ld a, TILE_UI_NUMBER_0
	add a, b
	ld [WRAM_TENS_TILE], a
	ld a, c

	; at that point, (a) contains the units
	; set up the tile id for the units
	ld b, TILE_UI_NUMBER_0
	add a, b
	ld [WRAM_UNITS_TILE], a

	ret

export InitSample, UpdateSample

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "graphics_data", rom0[GRAPHICS_DATA_ADDRESS_START]
incbin "tileset.chr"
incbin "input_interrupt.tlm"

