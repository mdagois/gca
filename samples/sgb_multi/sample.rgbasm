include "utils.rgbinc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Interrupts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "vblank_interrupt", rom0[$0040]
	reti

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Graphics
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "graphics", rom0

graphics_data:
incbin "tileset.chr"
incbin "sgb_multi.tlm"
graphics_data_end:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; VRAM vblank transfer
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "transfer", rom0

def TRANSFER_LIST_MAX_SIZE			equ (16)
assert (TRANSFER_LIST_MAX_SIZE & (TRANSFER_LIST_MAX_SIZE - 1)) == 0, "TRANSFER_LIST_MAX_SIZE should be a power of two"

rsreset
def TRANSFER_TILEMAP_ADDRESS		rw 1
def TRANSFER_TILE_INDEX				rb 1
def sizeof_TRANSFER					rb 0

rsreset
def TRANSFER_LIST_LEN				rb 1
def TRANSFER_LIST_NEXT				rw 1
def TRANSFER_LIST_DATA				rb TRANSFER_LIST_MAX_SIZE * sizeof_TRANSFER
def sizeof_TRANSFER_LIST			rb 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

macro ResetTransferList
	ld hl, WRAM_TRANSFER_LIST + TRANSFER_LIST_LEN
	ld [hl], 0
	ld hl, WRAM_TRANSFER_LIST + TRANSFER_LIST_NEXT
	ld [hl], low(WRAM_TRANSFER_LIST + TRANSFER_LIST_DATA)
	inc hl
	ld [hl], high(WRAM_TRANSFER_LIST + TRANSFER_LIST_DATA)
endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

rsreset
def PUSH_TRANSFER_PARAM_TILEMAP_PTR	rw 1
def PUSH_TRANSFER_PARAM_TILE_INDEX	rb 1
def sizeof_PUSH_TRANSFER_PARAM		rb 0

; push a single transfer into the transfer list
PushTransferFunc:
	; skip the transfer if the list is full
	ld hl, WRAM_TRANSFER_LIST + TRANSFER_LIST_LEN
	ld a, [hl]
	cp a, TRANSFER_LIST_MAX_SIZE
	ret z

	; increment the list size
	inc a
	ld [hl], a

	; read the tilemap address into (bc)
	ld hl, sp + 2 + PUSH_TRANSFER_PARAM_TILEMAP_PTR
	ld a, [hli]
	ld c, a
	ld a, [hli]
	ld b, a

	; read the tile index into (e)
	ld e, [hl]

	; get a pointer to the transfer list next element in (hl)
	ld hl, WRAM_TRANSFER_LIST + TRANSFER_LIST_NEXT
	ld a, [hli]
	ld h, [hl]
	ld l, a

	; push the transfer data into the list
	ld [hl], c
	inc hl
	ld [hl], b
	inc hl
	ld [hl], e

	; compute and store the update next pointer value
	inc hl
	ld a, low(hl)
	ld [WRAM_TRANSFER_LIST + TRANSFER_LIST_NEXT + 0], a
	ld a, high(hl)
	ld [WRAM_TRANSFER_LIST + TRANSFER_LIST_NEXT + 1], a

	ret

; helper macro for PushTransferFunc
; \1 = tilemap address, \2 = tile index
macro PushTransfer
	ld d, high(\1)
	ld e, low(\1)
	add sp, -sizeof_PUSH_TRANSFER_PARAM
	ld hl, sp + 0
	ld [hl], e
	inc hl
	ld [hl], d
	inc hl
	ld [hl], \2
	call PushTransferFunc
	add sp, sizeof_PUSH_TRANSFER_PARAM
endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; perform all the requested transfers
macro ProcessTransferList
	ld a, [WRAM_TRANSFER_LIST + TRANSFER_LIST_LEN]
	or a, a
	jr z, .end\@

	ld c, a
	ld hl, WRAM_TRANSFER_LIST + TRANSFER_LIST_DATA
	.loop\@
		ld a, [hli]
		ld e, a
		ld a, [hli]
		ld d, a
		ld a, [hli]
		push hl
		ld h, d
		ld l, e
		ld [hl], a
		pop hl

		dec c
		jr nz, .loop\@

	ResetTransferList
	.end\@
endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SGB
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "sgb", rom0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; constants
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

def SGB_BYTES_PER_PACKET			equ (16)

def COMMAND_PAL01					equ ($00)
def COMMAND_PAL23					equ ($01)
def COMMAND_PAL03					equ ($02)
def COMMAND_PAL12					equ ($03)
def COMMAND_ATTR_BLK				equ ($04)
def COMMAND_ATTR_LIN				equ ($05)
def COMMAND_ATTR_DIV				equ ($06)
def COMMAND_ATTR_CHR				equ ($07)
def COMMAND_SOUND					equ ($08)
def COMMAND_SOU_TRN					equ ($09)
def COMMAND_PAL_SET					equ ($0A)
def COMMAND_PAL_TRN					equ ($0B)
def COMMAND_ATRC_EN					equ ($0C)
def COMMAND_ICON_EN					equ ($0E)
def COMMAND_DATA_SND				equ ($0F)
def COMMAND_DATA_TRN				equ ($10)
def COMMAND_MLT_REQ					equ ($11)
def COMMAND_JUMP					equ ($12)
def COMMAND_CHR_TRN					equ ($13)
def COMMAND_PCT_TRN					equ ($14)
def COMMAND_ATTR_TRN				equ ($15)
def COMMAND_ATTR_SET				equ ($16)
def COMMAND_MASK_EN					equ ($17)
def COMMAND_PAL_PRI					equ ($19)

def PAL01							equ ((COMMAND_PAL01 << 3) | 1)
def PAL23							equ ((COMMAND_PAL23 << 3) | 1)
def PAL03							equ ((COMMAND_PAL03 << 3) | 1)
def PAL12							equ ((COMMAND_PAL12 << 3) | 1)
def ATTR_BLK_1						equ ((COMMAND_ATTR_BLK << 3) | 1)
def ATTR_BLK_2						equ ((COMMAND_ATTR_BLK << 3) | 2)
def ATTR_BLK_3						equ ((COMMAND_ATTR_BLK << 3) | 3)
def ATTR_BLK_4						equ ((COMMAND_ATTR_BLK << 3) | 4)
def ATTR_BLK_5						equ ((COMMAND_ATTR_BLK << 3) | 5)
def ATTR_BLK_6						equ ((COMMAND_ATTR_BLK << 3) | 6)
def ATTR_BLK_7						equ ((COMMAND_ATTR_BLK << 3) | 7)
def ATTR_LIN_1						equ ((COMMAND_ATTR_LIN << 3) | 1)
def ATTR_LIN_2						equ ((COMMAND_ATTR_LIN << 3) | 2)
def ATTR_LIN_3						equ ((COMMAND_ATTR_LIN << 3) | 3)
def ATTR_LIN_4						equ ((COMMAND_ATTR_LIN << 3) | 4)
def ATTR_LIN_5						equ ((COMMAND_ATTR_LIN << 3) | 5)
def ATTR_LIN_6						equ ((COMMAND_ATTR_LIN << 3) | 6)
def ATTR_LIN_7						equ ((COMMAND_ATTR_LIN << 3) | 7)
def ATTR_DIV						equ ((COMMAND_ATTR_DIV << 3) | 1)
def ATTR_CHR_1						equ ((COMMAND_ATTR_CHR << 3) | 1)
def ATTR_CHR_2						equ ((COMMAND_ATTR_CHR << 3) | 2)
def ATTR_CHR_3						equ ((COMMAND_ATTR_CHR << 3) | 3)
def ATTR_CHR_4						equ ((COMMAND_ATTR_CHR << 3) | 4)
def ATTR_CHR_5						equ ((COMMAND_ATTR_CHR << 3) | 5)
def ATTR_CHR_6						equ ((COMMAND_ATTR_CHR << 3) | 6)
def SOUND							equ ((COMMAND_SOUND << 3) | 1)
def SOU_TRN							equ ((COMMAND_SOU_TRN << 3) | 1)
def PAL_SET							equ ((COMMAND_PAL_SET << 3) | 1)
def PAL_TRN							equ ((COMMAND_PAL_TRN << 3) | 1)
def ATRC_EN							equ ((COMMAND_ATRC_EN << 3) | 1)
def ICON_EN							equ ((COMMAND_ICON_EN << 3) | 1)
def DATA_SND						equ ((COMMAND_DATA_SND << 3) | 1)
def DATA_TRN						equ ((COMMAND_DATA_TRN << 3) | 1)
def MLT_REQ							equ ((COMMAND_MLT_REQ << 3) | 1)
def JUMP							equ ((COMMAND_JUMP << 3) | 1)
def CHR_TRN							equ ((COMMAND_CHR_TRN << 3) | 1)
def PCT_TRN							equ ((COMMAND_PCT_TRN << 3) | 1)
def ATTR_TRN						equ ((COMMAND_ATTR_TRN << 3) | 1)
def ATTR_SET						equ ((COMMAND_ATTR_SET << 3) | 1)
def MASK_EN							equ ((COMMAND_MASK_EN << 3) | 1)
def PAL_PRI							equ ((COMMAND_PAL_PRI << 3) | 1)

def PADDING							equ ($00)

def MASK_EN_CANCEL					equ ($00)
def MASK_EN_FREEZE					equ ($01)
def MASK_EN_BLACK					equ ($02)
def MASK_EN_COLOR0					equ ($03)

def MLT_REQ_ONE_JOYPAD				equ ($00)
def MLT_REQ_TWO_JOYPADS				equ ($01)
def MLT_REQ_FOUR_JOYPADS			equ ($03)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; initialization packets
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SgbPackets_CoreInit:
; mandatory initial commands
db DATA_SND, $5D, $08, $00, $0B, $8C, $D0, $F4, $60, $00, $00, $00, $00, $00, $00, $00
db DATA_SND, $52, $08, $00, $0B, $A9, $E7, $9F, $01, $C0, $7E, $E8, $E8, $E8, $E8, $E0
db DATA_SND, $47, $08, $00, $0B, $C4, $D0, $16, $A5, $CB, $C9, $05, $D0, $10, $A2, $28
db DATA_SND, $3C, $08, $00, $0B, $F0, $12, $A5, $C9, $C9, $C8, $D0, $1C, $A5, $CA, $C9
db DATA_SND, $31, $08, $00, $0B, $0C, $A5, $CA, $C9, $7E, $D0, $06, $A5, $CB, $C9, $7E
db DATA_SND, $26, $08, $00, $0B, $39, $CD, $48, $0C, $D0, $34, $A5, $C9, $C9, $80, $D0
db DATA_SND, $1B, $08, $00, $0B, $EA, $EA, $EA, $EA, $EA, $A9, $01, $CD, $4F, $0C, $D0
db DATA_SND, $10, $08, $00, $0B, $4C, $20, $08, $EA, $EA, $EA, $EA, $EA, $60, $EA, $EA
; optional initial commands for SOU_TRN
db DATA_SND, $00, $09, $00, $0B, $AD, $C2, $02, $C9, $09, $D0, $1A, $A9, $01, $8D, $00
db DATA_SND, $0B, $09, $00, $0B, $42, $AF, $DB, $FF, $00, $F0, $05, $20, $73, $C5, $80
db DATA_SND, $16, $09, $00, $0B, $03, $20, $76, $C5, $A9, $31, $8D, $00, $42, $68, $68
db DATA_SND, $21, $09, $00, $01, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
db DATA_SND, $00, $08, $00, $03, $4C, $00, $09, $00, $00, $00, $00, $00, $00, $00, $00
SgbPackets_CoreInit_End:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; MASK_EN packets
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; \1 = mask type
macro SgbPacket_MaskEn
db MASK_EN, \1
ds 14, PADDING
endm

SgbPacket_MaskEn_Cancel:
	SgbPacket_MaskEn MASK_EN_CANCEL

SgbPacket_MaskEn_Freeze:
	SgbPacket_MaskEn MASK_EN_FREEZE

SgbPacket_MaskEn_Black:
	SgbPacket_MaskEn MASK_EN_BLACK

SgbPacket_MaskEn_Color0:
	SgbPacket_MaskEn MASK_EN_COLOR0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; MLT_REQ packets
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; \1 = joypad count type
macro SgbPacket_MltReq
db MLT_REQ, \1
ds 14, PADDING
endm

SgbPacket_OneJoypad:
	SgbPacket_MltReq MLT_REQ_ONE_JOYPAD

SgbPacket_TwoJoypads:
	SgbPacket_MltReq MLT_REQ_TWO_JOYPADS

SgbPacket_FourJoypads:
	SgbPacket_MltReq MLT_REQ_FOUR_JOYPADS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Wait function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; \1 = number of frames to wait
macro WaitFrames
	push bc
	push de
	ld c, \1
	call _WaitFrames
	pop de
	pop bc
endm

_WaitFrames:
	; (c) holds the number of frames to wait
	.all_frames
		ld de, 1756
		.single_frame
			nop
			nop
			nop
			dec de
			ld a, d
			or a, e
			jr nz, .single_frame
		dec c
		jr nz, .all_frames
	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Command
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

macro SendCommand
	ld hl, \1
	call _SendCommand
endm

_SendPacket:
	; packet start marker
	xor a
	ldh [rP1], a
	ld a, P1F_GET_NONE
	ldh [rP1], a

	; send the bytes of the packet
	ld b, SGB_BYTES_PER_PACKET
	.send_byte
		ld e, [hl]
		inc hl

		; send the bits of the byte 
		ld d, 8
		.send_bit
			rrc e
			ld a, P1F_4		; one
			jr c, .pulse
				ld a, P1F_5	; zero
			.pulse
			ldh [rP1], a
			ld a, P1F_GET_NONE
			ldh [rP1], a

			dec d
			jr nz, .send_bit

		dec b
		jr nz, .send_byte

	; sentinel
	ld a, P1F_5
	ldh [rP1], a
	ld a, P1F_GET_NONE
	ldh [rP1], a

	; wait for about 60 ms
	WaitFrames 4
	ret

_SendCommand:
	; get the command header
	ld a, [hl]
	push af

	; retrieve the number of packets in the command
	and a, $07

	; check that there is at least one packet
	ret z

	; send the packets of the command
	ld c, a
	.send_packet
		call _SendPacket
		dec c
		jr nz, .send_packet

	; retrieve the command type
	pop af
	srl a
	srl a
	srl a

	; check whether the command is using a 4KB payload
	cp a, COMMAND_SOU_TRN
	jr z, .4KB_command
	cp a, COMMAND_PAL_TRN
	jr z, .4KB_command
	cp a, COMMAND_DATA_TRN
	jr z, .4KB_command
	cp a, COMMAND_CHR_TRN
	jr z, .4KB_command
	cp a, COMMAND_PCT_TRN
	jr z, .4KB_command
	cp a, COMMAND_ATTR_TRN
	jr z, .4KB_command

	; not a 4KB command
	ret

	.4KB_command
	; wait extra frames for completion of 4KB commands
	WaitFrames 2

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SGB initialization
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PerformCustomInitialization:
	ret

InitializeSgbDevice:
	WaitFrames 60
	SendCommand SgbPacket_MaskEn_Freeze

def COMMAND_INDEX = 0
rept ((SgbPackets_CoreInit_End - SgbPackets_CoreInit) / SGB_BYTES_PER_PACKET)
	SendCommand SgbPackets_CoreInit + COMMAND_INDEX
def COMMAND_INDEX += SGB_BYTES_PER_PACKET
endr

	call PerformCustomInitialization

	WaitFrames 1
	SendCommand SgbPacket_MaskEn_Cancel
	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; WRAM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

rsset _RAM

def WRAM_PAD_INPUT_0				rb sizeof_PAD_INPUT
def WRAM_PAD_INPUT_1				rb sizeof_PAD_INPUT
def WRAM_PAD_INPUT_2				rb sizeof_PAD_INPUT
def WRAM_PAD_INPUT_3				rb sizeof_PAD_INPUT

def WRAM_JOYPADS_COUNT				rb 1

def WRAM_TRANSFER_LIST				rb sizeof_TRANSFER_LIST

def WRAM_END						rb 0

; sanity checks
def WRAM_USAGE						equ (WRAM_END - _RAM)
println "WRAM usage: {d:WRAM_USAGE} bytes"
assert WRAM_USAGE <= $2000, "Too many bytes used in WRAM"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Hexadecimal to tile conversion
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "hexadecimal", rom0

HexToTileTable:
db $50, $51, $52, $53
db $54, $55, $56, $57
db $58, $59, $61, $62
db $63, $64, $65, $66

; convert (a) from hexadecimal to a tile index
macro HexToTileA
	ld h, 0
	ld l, a
	ld de, HexToTileTable
	add hl, de
	ld a, [hl]
endm

; \1 = line, \2 = column
macro DisplayRegisterA
	push af
	swap a
	and a, $0F
	HexToTileA
	PushTransfer _SCRN0 + SCRN_VX_B * \1 + \2, a
	pop af
	and a, $0F
	HexToTileA
	PushTransfer _SCRN0 + SCRN_VX_B * \1 + \2 + 1, a
endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Sample
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "sample", rom0

InitSample:
	ClearMemory _RAM, WRAM_USAGE
	InitPadInput WRAM_PAD_INPUT_0
	InitPadInput WRAM_PAD_INPUT_1
	InitPadInput WRAM_PAD_INPUT_2
	InitPadInput WRAM_PAD_INPUT_3
	copy [WRAM_JOYPADS_COUNT], 1
	ResetTransferList

	copy [rBGP], %11100100
	CopyMemory _VRAM8000, graphics_data, graphics_data_end - graphics_data

	copy [rIE], IEF_VBLANK
	ei

	copy [rLCDC], LCDCF_ON | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_BGON

	ld a, [HARDWARE_MODEL_REGISTER]
	cp a, HARDWARE_MODEL_SGB
	call z, InitializeSgbDevice

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdatePad_0:
	UpdatePadInput WRAM_PAD_INPUT_0
	ret

UpdatePad_1:
	UpdatePadInput WRAM_PAD_INPUT_1
	ret

UpdatePad_2:
	UpdatePadInput WRAM_PAD_INPUT_2
	ret

UpdatePad_3:
	UpdatePadInput WRAM_PAD_INPUT_3
	ret

UpdatePad_All:
	ld a, [WRAM_JOYPADS_COUNT]
	cp a, 1
	jr z, .one_joypad
	cp a, 2
	jr z, .two_joypads

	call UpdatePad_0
	call UpdatePad_1
	call UpdatePad_2
	call UpdatePad_3
	ret

	.two_joypads
	call UpdatePad_0
	call UpdatePad_1
	ret

	.one_joypad
	call UpdatePad_0
	ret

UpdateDisplay:
	; joypad 1
	ld a, [WRAM_PAD_INPUT_0 + PAD_INPUT_CURRENT]
	DisplayRegisterA 3, 7
	ld a, [WRAM_JOYPADS_COUNT]
	dec a
	jp z, .reset_3_joypads

	; joypad 2
	ld a, [WRAM_PAD_INPUT_1 + PAD_INPUT_CURRENT]
	DisplayRegisterA 5, 7
	ld a, [WRAM_JOYPADS_COUNT]
	cp a, 2
	jp z, .reset_2_joypads

	; joypads 3 and 4
	ld a, [WRAM_PAD_INPUT_2 + PAD_INPUT_CURRENT]
	DisplayRegisterA 7, 7
	ld a, [WRAM_PAD_INPUT_3 + PAD_INPUT_CURRENT]
	DisplayRegisterA 9, 7
	jp .display_done

	.reset_3_joypads
	xor a
	DisplayRegisterA 5, 7

	.reset_2_joypads
	xor a
	DisplayRegisterA 7, 7
	xor a
	DisplayRegisterA 9, 7

	.display_done
	ret

SwitchJoypadsCount:
	ld a, [WRAM_JOYPADS_COUNT]

	cp a, 1
	jr nz, .switch_to_2_joypads
		copy [WRAM_JOYPADS_COUNT], 2
		SendCommand SgbPacket_TwoJoypads
		ret
	.switch_to_2_joypads

	cp a, 2
	jr nz, .switch_to_4_joypads
		copy [WRAM_JOYPADS_COUNT], 4
		SendCommand SgbPacket_FourJoypads
		ret
	.switch_to_4_joypads

	copy [WRAM_JOYPADS_COUNT], 1
	SendCommand SgbPacket_OneJoypad
	ret

UpdateSample:
	halt

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	; vblank
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	ProcessTransferList

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	; logic
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	ld a, [HARDWARE_MODEL_REGISTER]
	cp a, HARDWARE_MODEL_DMG
	ret z

	call UpdatePad_All
	call UpdateDisplay

	TestPadInput_Pressed WRAM_PAD_INPUT_0, PADF_SELECT
	call z, SwitchJoypadsCount

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

export InitSample, UpdateSample

