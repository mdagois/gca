include "utils.rgbinc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "vblank_interrupt", rom0[$0040]
    reti

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

def TILE_UI_NUMBER_0                equ (80)

def TILES_COUNT                     equ (384)
def BYTES_PER_TILE                  equ (16)
def TILES_BYTE_SIZE                 equ (TILES_COUNT * BYTES_PER_TILE)

def TILEMAPS_COUNT                  equ (1)
def BYTES_PER_TILEMAP               equ (1024)
def TILEMAPS_BYTE_SIZE              equ (TILEMAPS_COUNT * BYTES_PER_TILEMAP)

def GRAPHICS_DATA_SIZE              equ (TILES_BYTE_SIZE + TILEMAPS_BYTE_SIZE)
def GRAPHICS_DATA_ADDRESS_END       equ ($8000)
def GRAPHICS_DATA_ADDRESS_START     equ (GRAPHICS_DATA_ADDRESS_END - GRAPHICS_DATA_SIZE)

; load the graphics data from ROM to VRAM
macro LoadGraphicsDataIntoVRAM
    ld de, GRAPHICS_DATA_ADDRESS_START
    ld hl, _VRAM8000
    .load_tile\@
        ld a, [de]
        inc de
        ld [hli], a
        ld a, d
        cp a, high(GRAPHICS_DATA_ADDRESS_END)
        jr nz, .load_tile\@
endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

rsset _RAM

def WRAM_PAD_INPUT                  rb sizeof_PAD_INPUT
def WRAM_FRAME_COUNTER              rb 1
def NOTE_INDEX                      rb 1

def WRAM_END                        rb 0

; sanity checks
def WRAM_USAGE                      equ (WRAM_END - _RAM)
println "WRAM usage: {d:WRAM_USAGE} bytes"
assert WRAM_USAGE <= $2000, "Too many bytes used in WRAM"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "sample", rom0

InitSample:
    ; init the WRAM state
    InitPadInput WRAM_PAD_INPUT
    copy [WRAM_FRAME_COUNTER], $FF
    xor a
    ld [NOTE_INDEX], a

    ; init the sound
    copy [rNR52], AUDENA_ON
    copy [rNR50], $77
    copy [rNR51], $FF

    ; init graphics
    copy [rBGP], %11100100
    LoadGraphicsDataIntoVRAM

    ; enable interrupts
    copy [rIE], IEF_VBLANK
    ei

    ; set the graphics parameters and turn back LCD on
    copy [rLCDC], LCDCF_ON | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_BGON

    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

def TIME_BETWEEN_NOTES          equ (20)

Notes:
dw $060b, $0642, $0672, $0689, $06b2, $06d6, $06f7, $0706
dw $06f7, $06d6, $06b2, $0689, $0672, $0642, $060b, $0000

UpdateSample:
    halt

    UpdatePadInput WRAM_PAD_INPUT

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ; skip counter check if the counter is disabled (equals $FF)
    ld a, $FF
    ld hl, WRAM_FRAME_COUNTER
    xor a, [hl]
    jr z, .play_notes

        ; decrease the timer and play the next sound when zero is reached
        dec [hl]
        jr nz, .sound_switch
            ld a, [NOTE_INDEX]
            inc a
            ld [NOTE_INDEX], a

            sla a
            ld d, 0
            ld e, a

            ld hl, Notes
            add hl, de

            ld a, [hli]
            or a, a
            jr nz, .stop_sound
                copy [rNR12], $00
                copy [rNR14], $C0
                ld a, $FF
                ld [WRAM_FRAME_COUNTER], a
                jr .play_notes
            .stop_sound

            ld [rNR13], a
            ld a, [hli]
            ld [rNR14], a

            copy [WRAM_FRAME_COUNTER], TIME_BETWEEN_NOTES
        .sound_switch

    .play_notes

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    TestPadInput_Pressed WRAM_PAD_INPUT, PADF_A
    jr nz, .start_notes
        xor a
        ld [NOTE_INDEX], a

        copy [rNR10], $00
        copy [rNR11], $80
        copy [rNR12], $F0

        ld hl, Notes
        ld a, [hli]
        ld [rNR13], a
        ld a, [hl]
        or a, $80
        ld [rNR14], a

        copy [WRAM_FRAME_COUNTER], TIME_BETWEEN_NOTES
    .start_notes

    ret

export InitSample, UpdateSample

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "graphics_data", rom0[GRAPHICS_DATA_ADDRESS_START]
incbin "tileset.chr"
incbin "ch1_continuous.tlm"

