if !def(UTILS_RGBINC)
def UTILS_RGBINC equ 1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

include "hardware.rgbinc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Macro-instructions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; copy \2 into \1 through (a)
; example: copy [$FF84], 10
macro copy
	ld a, \2
	ld \1, a
endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; OAM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; clear the OAM
macro InitOAM
	ld c, OAM_COUNT
	ld hl, _OAMRAM + OAMA_Y
	ld de, sizeof_OAM_ATTRS
	.init_oam\@
		ld [hl], 0
		add hl, de
		dec c
		jr nz, .init_oam\@
endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; DMA
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; start a DMA copy
; \1 = destination address
; \2 = source address
; \3 = size
; \4 = mode (HDMA5F_MODE_GP or HDMA5F_MODE_HBL)
macro DmaCopy
	assert (\3) >= 16, "The DMA copy size must at least be 16 bytes"
	assert (\3) % 16 == 0, "The DMA copy size must be a multiple of 16 bytes"
	copy [rHDMA1], high(\2)
	copy [rHDMA2], low(\2)
	copy [rHDMA3], high(\1)
	copy [rHDMA4], low(\1)
	copy [rHDMA5], (\4) | (((\3) / 16) - 1)
endm

; start a general-purpose DMA copy
; \1 = destination address
; \2 = source address
; \3 = size
macro DmaCopy_General
	DmaCopy \1, \2, \3, HDMA5F_MODE_GP
endm

; start a hblank DMA copy
; \1 = destination address
; \2 = source address
; \3 = size
macro DmaCopy_Hblank
	DmaCopy \1, \2, \3, HDMA5F_MODE_HBL
endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Pad input
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; struct to hold the pad input (dpad + buttons)
rsreset
def PAD_INPUT_CURRENT	rb 1
def PAD_INPUT_PREVIOUS	rb 1
def PAD_INPUT_PRESSED	rb 1
def PAD_INPUT_RELEASED	rb 1
def sizeof_PAD_INPUT	rb 0

; init a pad input struct at address \1
; expected to be used only once at initialization
; example: InitPadInput _RAM + 16
macro InitPadInput
	ld a, $FF
	ld [\1 + PAD_INPUT_CURRENT], a
	ld [\1 + PAD_INPUT_PREVIOUS], a
	ld [\1 + PAD_INPUT_PRESSED], a
	ld [\1 + PAD_INPUT_RELEASED], a
endm

; read the keypad input into a pad input struct at address \1
; expected to be used only once in the main loop
; example: UpdatePadInput _HRAM + 4
macro UpdatePadInput
	; store the previous input into the struct and (c)
	ld a, [\1 + PAD_INPUT_CURRENT]
	ld [\1 + PAD_INPUT_PREVIOUS], a
	ld c, a

	; read the dpad
	ld a, P1F_GET_DPAD
	ldh [rP1], a
	ldh a, [rP1]
	ldh a, [rP1]

	; put the dpad input into (b)'s high nibble
	swap a
	and a, $F0
	ld b, a

	; read the buttons
	ld a, P1F_GET_BTN
	ldh [rP1], a
	ldh a, [rP1]
	ldh a, [rP1]
	ldh a, [rP1]
	ldh a, [rP1]
	ldh a, [rP1]
	ldh a, [rP1]

	; merge the buttons' input into (b)'s low nibble
	and a, $0F
	or a, b
	ld b, a

	; store the current input
	ld [\1 + PAD_INPUT_CURRENT], a

	; disable input polling
	ld a, P1F_GET_NONE
	ldh [rP1], a

	; compute and store pressed buttons
	ld a, c
	cpl
	or a, b
	ld [\1 + PAD_INPUT_PRESSED], a

	; compute and store released buttons
	ld a, b
	cpl
	or a, c
	ld [\1 + PAD_INPUT_RELEASED], a
endm

; raise the zero flag if all keys in \2 are held in the pad input struct \1
; example: TestPadInput_HeldAll _RAM + 4, PADF_LEFT | PADF_DOWN
macro TestPadInput_HeldAll
	ld a, [\1 + PAD_INPUT_CURRENT]
	and a, \2
endm

; raise the zero flag if input \2 is pressed in the pad input struct \1
; example: TestPadInput_Pressed _HRAM + 12, PADF_LEFT
macro TestPadInput_Pressed
	ld a, [\1 + PAD_INPUT_PRESSED]
	and a, \2
endm

; raise the zero flag if input \2 is released in the pad input struct \1
; example: TestPadInput_Released _RAM + 24, PADF_A
macro TestPadInput_Released
	ld a, [\1 + PAD_INPUT_RELEASED]
	and a, \2
endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

endc

