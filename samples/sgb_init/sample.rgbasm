include "utils.rgbinc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "vblank_interrupt", rom0[$0040]
	reti

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "graphics", rom0

graphics_data_dmg:
incbin "tileset.chr"
incbin "sgb_dmg_fallback.tlm"
graphics_data_dmg_end:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "sgb_initialization", rom0

SgbPackets_CoreInit:
db $79, $5D, $08, $00, $0B, $8C, $D0, $F4, $60, $00, $00, $00, $00, $00, $00, $00
db $79, $52, $08, $00, $0B, $A9, $E7, $9F, $01, $C0, $7E, $E8, $E8, $E8, $E8, $E0
db $79, $47, $08, $00, $0B, $C4, $D0, $16, $A5, $CB, $C9, $05, $D0, $10, $A2, $28
db $79, $3C, $08, $00, $0B, $F0, $12, $A5, $C9, $C9, $C8, $D0, $1C, $A5, $CA, $C9
db $79, $31, $08, $00, $0B, $0C, $A5, $CA, $C9, $7E, $D0, $06, $A5, $CB, $C9, $7E
db $79, $26, $08, $00, $0B, $39, $CD, $48, $0C, $D0, $34, $A5, $C9, $C9, $80, $D0
db $79, $1B, $08, $00, $0B, $EA, $EA, $EA, $EA, $EA, $A9, $01, $CD, $4F, $0C, $D0
db $79, $10, $08, $00, $0B, $4C, $20, $08, $EA, $EA, $EA, $EA, $EA, $60, $EA, $EA
SgbPackets_CoreInit_End:

SgbPackets_SoundInit:
db $79, $00, $09, $00, $0B, $AD, $C2, $02, $C9, $09, $D0, $1A, $A9, $01, $8D, $00
db $79, $0B, $09, $00, $0B, $42, $AF, $DB, $FF, $00, $F0, $05, $20, $73, $C5, $80
db $79, $16, $09, $00, $0B, $03, $20, $76, $C5, $A9, $31, $8D, $00, $42, $68, $68
db $79, $21, $09, $00, $01, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
db $79, $00, $08, $00, $03, $4C, $00, $09, $00, $00, $00, $00, $00, $00, $00, $00
SgbPackets_SoundInit_End:

; \1 = type
macro SgbPacket_MaskEn
db $B9, \1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
endm

SgbPacket_MaskEn_Cancel:
	SgbPacket_MaskEn $00
SgbPacket_MaskEn_Cancel_End:

SgbPacket_MaskEn_Freeze:
	SgbPacket_MaskEn $01
SgbPacket_MaskEn_Freeze_End:

SgbPacket_MaskEn_Black:
	SgbPacket_MaskEn $02
SgbPacket_MaskEn_Black_End:

SgbPacket_MaskEn_Color0:
	SgbPacket_MaskEn $03
SgbPacket_MaskEn_Color0_End:

SgbPacket_Pal01_Test:
db $01, $00, $7C, $E0, $03, $1F, $00, $00, $00, $00, $7C, $E0, $03, $1F, $00, $00

def SGB_BYTES_PER_PACKET		equ (16)
def SGB_CORE_INIT_PACKET_COUNT	equ ((SgbPackets_CoreInit_End - SgbPackets_CoreInit) / SGB_BYTES_PER_PACKET)
def SGB_SOUND_INIT_PACKET_COUNT	equ ((SgbPackets_SoundInit_End - SgbPackets_SoundInit) / SGB_BYTES_PER_PACKET)

WaitAtLeastOneSecond:
	xor a
	ld c, 5
	.loop_c
		ld b, a
		.loop_b
			ld d, a
			.loop_d
				inc d
				jr nz, .loop_d

			inc b
			jr nz, .loop_b

		dec c
		jr nz, .loop_c
	ret

macro SendCommand
	ld hl, \1
	call _SendCommand
endm

_SendPacket:
	; packet start marker
	xor a
	ldh [rP1], a
	ld a, P1F_GET_NONE
	ldh [rP1], a

	; send all bytes
	ld b, 16
	.send_byte
		ld e, [hl]
		inc hl

		ld d, 8
		.send_bit
			rrc e
			ld a, P1F_4		; one
			jr c, .pulse
				ld a, P1F_5	; zero
			.pulse
			ldh [rP1], a
			ld a, P1F_GET_NONE
			ldh [rP1], a

			dec d
			jr nz, .send_bit

		dec b
		jr nz, .send_byte

	; sentinel
	ld a, P1F_5
	ldh [rP1], a
	ld a, P1F_GET_NONE
	ldh [rP1], a

	; long rest period
	ld d, 128
	.outer
		ld e, 146
		.inner
			dec e
			jr nz, .inner
		dec d
		jr nz, .outer

	ret

_SendCommand:
	; retrieve the number of packets in the command
	ld a, [hl]
	and a, $07

	; send all packets
	ld c, a
	.send_packet
		call _SendPacket
		dec c
		jr nz, .send_packet

	ret

InitializeSGB:
	call WaitAtLeastOneSecond
	SendCommand SgbPacket_MaskEn_Black

COMMAND_INDEX = 0
rept SGB_CORE_INIT_PACKET_COUNT
	SendCommand SgbPackets_CoreInit + COMMAND_INDEX
COMMAND_INDEX += SGB_BYTES_PER_PACKET
endr

COMMAND_INDEX = 0
rept SGB_SOUND_INIT_PACKET_COUNT
	SendCommand SgbPackets_SoundInit + COMMAND_INDEX
COMMAND_INDEX += SGB_BYTES_PER_PACKET
endr

	;Custom init
	SendCommand SgbPacket_Pal01_Test

	halt
	SendCommand SgbPacket_MaskEn_Cancel

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "sample", rom0

InitSample_DMG_Pre:
	copy [rBGP], %11100100
	CopyMemory _VRAM8000, graphics_data_dmg, graphics_data_dmg_end - graphics_data_dmg
	ret

InitSample_DMG_Post:
	ret

InitSample_SGB_Pre:
	copy [rBGP], %11100100
	CopyMemory _VRAM8000, graphics_data_dmg, graphics_data_dmg_end - graphics_data_dmg
	ret

InitSample_SGB_Post:
	; xxx
	halt
	halt
	call InitializeSGB
	ret

InitSample:
	ld a, [HARDWARE_MODEL_REGISTER]
	dec a
	call z, InitSample_DMG_Pre
	dec a
	call z, InitSample_SGB_Pre

	; vblank interrupt
	copy [rIE], IEF_VBLANK
	ei

	; set the graphics parameters and turn back LCD on
	copy [rLCDC], LCDCF_ON | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_BGON

	ld a, [HARDWARE_MODEL_REGISTER]
	dec a
	call z, InitSample_DMG_Post
	dec a
	call z, InitSample_SGB_Post

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateSample:
	halt
	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

export InitSample, UpdateSample

