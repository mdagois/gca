include "utils.rgbinc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "vblank_interrupt", rom0[$0040]
	reti

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "graphics", rom0

graphics_data_dmg:
incbin "tileset.chr"
incbin "sgb_dmg_fallback.tlm"
graphics_data_dmg_end:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "sgb_initialization", rom0

SgbCoreInitPackets:
db $79, $5D, $08, $00, $0B, $8C, $D0, $F4, $60, $00, $00, $00, $00, $00, $00, $00
db $79, $52, $08, $00, $0B, $A9, $E7, $9F, $01, $C0, $7E, $E8, $E8, $E8, $E8, $E0
db $79, $47, $08, $00, $0B, $C4, $D0, $16, $A5, $CB, $C9, $05, $D0, $10, $A2, $28
db $79, $3C, $08, $00, $0B, $F0, $12, $A5, $C9, $C9, $C8, $D0, $1C, $A5, $CA, $C9
db $79, $31, $08, $00, $0B, $0C, $A5, $CA, $C9, $7E, $D0, $06, $A5, $CB, $C9, $7E
db $79, $26, $08, $00, $0B, $39, $CD, $48, $0C, $D0, $34, $A5, $C9, $C9, $80, $D0
db $79, $1B, $08, $00, $0B, $EA, $EA, $EA, $EA, $EA, $A9, $01, $CD, $4F, $0C, $D0
db $79, $10, $08, $00, $0B, $4C, $20, $08, $EA, $EA, $EA, $EA, $EA, $60, $EA, $EA
SgbCoreInitPackets_End:

SgbSoundInitPackets:
db $79, $00, $09, $00, $0B, $AD, $C2, $02, $C9, $09, $D0, $1A, $A9, $01, $8D, $00
db $79, $0B, $09, $00, $0B, $42, $AF, $DB, $FF, $00, $F0, $05, $20, $73, $C5, $80
db $79, $16, $09, $00, $0B, $03, $20, $76, $C5, $A9, $31, $8D, $00, $42, $68, $68
db $79, $21, $09, $00, $01, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
db $79, $00, $08, $00, $03, $4C, $00, $09, $00, $00, $00, $00, $00, $00, $00, $00
SgbSoundInitPackets_End:

def SGB_BYTES_PER_PACKET		equ (16)
def SGB_CORE_INIT_PACKET_COUNT	equ ((SgbCoreInitPackets_End - SgbCoreInitPackets) / SGB_BYTES_PER_PACKET)
def SGB_SOUND_INIT_PACKET_COUNT	equ ((SgbSoundInitPackets_End - SgbSoundInitPackets) / SGB_BYTES_PER_PACKET)

WaitOneSecond:
	ld c, 4
	.loop_c
		ld b, 0
		.loop_b
			xor a
			.loop_a
				inc a
				jr nz, .loop_a
			inc b
			jr nz, .loop_b
		dec c
		jr nz, .loop_c
	ret

InitializeSGB:
	call WaitOneSecond
	;MASK_EN
	;Send init data
	;Send sound init data
	;Custom init
	;Wait a frame
	;MASK_EN
	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "sample", rom0

InitSample_DMG_Pre:
	copy [rBGP], %11100100
	CopyMemory _VRAM8000, graphics_data_dmg, graphics_data_dmg_end - graphics_data_dmg
	ret

InitSample_DMG_Post:
	ret

InitSample_SGB_Pre:
	ret

InitSample_SGB_Post:
	call InitializeSGB
	ret

InitSample:
	ld a, [HARDWARE_MODEL_REGISTER]
	dec a
	call z, InitSample_DMG_Pre
	dec a
	call z, InitSample_SGB_Pre

	; set the graphics parameters and turn back LCD on
	copy [rLCDC], LCDCF_ON | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_BGON

	ld a, [HARDWARE_MODEL_REGISTER]
	dec a
	call z, InitSample_DMG_Post
	dec a
	call z, InitSample_SGB_Post

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateSample:
	halt
	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

export InitSample, UpdateSample

