include "utils.rgbinc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Interrupts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "vblank_interrupt", rom0[$0040]
	push af
	ld a, 1
	ld [WRAM_IS_VBLANK], a
	pop af
	reti

section "timer_interrupt", rom0[$0050]
	jp TimerInterrupt

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Timer
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "timer", rom0

StartTimer:
	ld a, 256 - 256
	ld [rTMA], a
	ld [rTIMA], a
	ld [rDIV], a
	copy [rTAC], TACF_START | TACF_16KHZ
	ret

StopTimer:
	copy [rTAC], TACF_STOP
	ret

TimerInterrupt:
	PushAllRegisters

	call StopTimer
	call SendPacketByte

	PopAllRegisters
	reti

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Protocol
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

rsreset
COMMAND_TYPE_INIT			rb 1
COMMAND_TYPE_PRINT			rb 1
COMMAND_TYPE_DATA			rb 1
COMMAND_TYPE_DATA_END		rb 1
COMMAND_TYPE_BREAK			rb 1
COMMAND_TYPE_STATUS			rb 1
COMMAND_TYPES_COUNT			rb 0

PACKET_MAGIC_0				equ ($88)
PACKET_MAGIC_1				equ ($33)

PACKET_TYPE_INIT			equ ($01)
PACKET_TYPE_PRINT			equ ($02)
PACKET_TYPE_DATA			equ ($04)
PACKET_TYPE_BREAK			equ ($08)
PACKET_TYPE_STATUS			equ ($0F)

PACKET_COMPRESSION_OFF		equ ($00)
PACKET_COMPRESSION_ON		equ ($01)

rsreset
PRINT_STATE_COMMAND_TYPE	rb 1

PRINT_STATE_BYTE_NUMBER		rb 1

PRINT_STATE_DATA_POINTER	rb 2
PRINT_STATE_DATA_END		rb 2

PRINT_STATE_FLAGS			rb 1
sizeof_PRINT_STATE			rb 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

macro FixedPacket
db PACKET_MAGIC_0, PACKET_MAGIC_1, \1, PACKET_COMPRESSION_OFF, $00, $00, \1, $00, $00, $00
endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "protocol", rom0

;;;;;;;;;;;;;;;;;;;;
; print packet
;;;;;;;;;;;;;;;;;;;;

PACKET_PRINT_PAYLOAD_SIZE			equ ($0004)
PACKET_PRINT_SHEET_COUNT			equ ($01)
PACKET_PRINT_FEEDS					equ ($14)
PACKET_PRINT_PALETTE				equ ($1B)
PACKET_PRINT_DENSITY				equ ($40)
PACKET_PRINT_CHECKSUM				equ (PACKET_TYPE_PRINT + PACKET_PRINT_PAYLOAD_SIZE + PACKET_PRINT_SHEET_COUNT + PACKET_PRINT_FEEDS + PACKET_PRINT_PALETTE + PACKET_PRINT_DENSITY)

packet_print:
db PACKET_MAGIC_0, PACKET_MAGIC_1
db PACKET_TYPE_PRINT, PACKET_COMPRESSION_OFF
dw PACKET_PRINT_PAYLOAD_SIZE
db PACKET_PRINT_SHEET_COUNT
db PACKET_PRINT_FEEDS
db PACKET_PRINT_PALETTE
db PACKET_PRINT_DENSITY
dw PACKET_PRINT_CHECKSUM
db $00, $00
packet_print_end:

;;;;;;;;;;;;;;;;;;;;
; data packets
;;;;;;;;;;;;;;;;;;;;

PACKET_DATA_PAYLOAD_SIZE 				equ (640)
PACKET_DATA_BYTE_OVERHEAD				equ (10)
PACKET_DATA_SIZE						equ (PACKET_DATA_PAYLOAD_SIZE + PACKET_DATA_BYTE_OVERHEAD)

DATA_PACKET_NUMBER = 0
rept 9

packet_data_{d:DATA_PACKET_NUMBER}:
incbin "print_data.pkt", DATA_PACKET_NUMBER * PACKET_DATA_SIZE, PACKET_DATA_SIZE
packet_data_{d:DATA_PACKET_NUMBER}_end:

DATA_PACKET_NUMBER = DATA_PACKET_NUMBER + 1
endr

;;;;;;;;;;;;;;;;;;;;
; fixed packets
;;;;;;;;;;;;;;;;;;;;

packet_init:
	FixedPacket PACKET_TYPE_INIT
packet_init_end:

packet_data_end:
	FixedPacket PACKET_TYPE_DATA
packet_data_end_end:

packet_break:
	FixedPacket PACKET_TYPE_BREAK
packet_break_end:

packet_status:
	FixedPacket PACKET_TYPE_STATUS
packet_status_end:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SendPacketByte_Init:
	ld a, [WRAM_PRINT_STATE + PRINT_STATE_BYTE_NUMBER]
	ld d, 0
	ld e, a
	ld hl, packet_init
	add hl, de

	copy [rSB], [hl]
	copy [rSC], SCF_START | SCF_SOURCE

	ld a, [WRAM_PRINT_STATE + PRINT_STATE_BYTE_NUMBER]
	inc a
	ld [WRAM_PRINT_STATE + PRINT_STATE_BYTE_NUMBER], a
	cp a, packet_init_end - packet_init
	jr nz, .packet_done
		copy [WRAM_PRINT_STATE + PRINT_STATE_COMMAND_TYPE], COMMAND_TYPE_DATA
		copy [WRAM_PRINT_STATE + PRINT_STATE_BYTE_NUMBER], 0
		copy [WRAM_PRINT_STATE + PRINT_STATE_FLAGS], 0
		ld hl, packet_data_0
		store16 WRAM_PRINT_STATE + PRINT_STATE_DATA_POINTER, hl
		ld de, PACKET_DATA_SIZE
		add hl, de
		store16 WRAM_PRINT_STATE + PRINT_STATE_DATA_END, hl
	.packet_done

	call StartTimer
	ret

SendPacketByte_Print:
	ld a, [WRAM_PRINT_STATE + PRINT_STATE_BYTE_NUMBER]
	ld d, 0
	ld e, a
	ld hl, packet_print
	add hl, de

	copy [rSB], [hl]
	copy [rSC], SCF_START | SCF_SOURCE

	ld a, [WRAM_PRINT_STATE + PRINT_STATE_BYTE_NUMBER]
	inc a
	ld [WRAM_PRINT_STATE + PRINT_STATE_BYTE_NUMBER], a
	cp a, packet_print_end - packet_print
	jr nz, .packet_done
		copy [WRAM_PRINT_STATE + PRINT_STATE_COMMAND_TYPE], COMMAND_TYPE_STATUS
		copy [WRAM_PRINT_STATE + PRINT_STATE_BYTE_NUMBER], 0
		copy [WRAM_PRINT_STATE + PRINT_STATE_FLAGS], 0
	.packet_done

	call StartTimer
	ret

SendPacketByte_Data:
	load16 hl, WRAM_PRINT_STATE + PRINT_STATE_DATA_POINTER
	copy [rSB], [hl]
	copy [rSC], SCF_START | SCF_SOURCE

	inc hl
	store16 WRAM_PRINT_STATE + PRINT_STATE_DATA_POINTER, hl

	load16 de, WRAM_PRINT_STATE + PRINT_STATE_DATA_END
	ld a, e
	cp a, l
	jr nz, .next_byte
	ld a, h
	cp a, d
	jr nz, .next_byte

	copy [WRAM_PRINT_STATE + PRINT_STATE_COMMAND_TYPE], COMMAND_TYPE_DATA_END
	copy [WRAM_PRINT_STATE + PRINT_STATE_BYTE_NUMBER], 0
	copy [WRAM_PRINT_STATE + PRINT_STATE_FLAGS], 0

	.next_byte
	call StartTimer
	ret

SendPacketByte_DataEnd:
	ld a, [WRAM_PRINT_STATE + PRINT_STATE_BYTE_NUMBER]
	ld d, 0
	ld e, a
	ld hl, packet_data_end
	add hl, de

	copy [rSB], [hl]
	copy [rSC], SCF_START | SCF_SOURCE

	ld a, [WRAM_PRINT_STATE + PRINT_STATE_BYTE_NUMBER]
	inc a
	ld [WRAM_PRINT_STATE + PRINT_STATE_BYTE_NUMBER], a
	cp a, packet_data_end_end - packet_data_end
	jr nz, .packet_done
		copy [WRAM_PRINT_STATE + PRINT_STATE_COMMAND_TYPE], COMMAND_TYPE_PRINT
		copy [WRAM_PRINT_STATE + PRINT_STATE_BYTE_NUMBER], 0
		copy [WRAM_PRINT_STATE + PRINT_STATE_FLAGS], 0
	.packet_done

	call StartTimer
	ret

SendPacketByte_Break:
	ret

SendPacketByte_Status:
	ld a, [WRAM_PRINT_STATE + PRINT_STATE_BYTE_NUMBER]
	ld d, 0
	ld e, a
	ld hl, packet_status
	add hl, de

	copy [rSB], [hl]
	copy [rSC], SCF_START | SCF_SOURCE

	ld a, [WRAM_PRINT_STATE + PRINT_STATE_BYTE_NUMBER]
	inc a
	ld [WRAM_PRINT_STATE + PRINT_STATE_BYTE_NUMBER], a
	cp a, packet_status_end - packet_status
	jr nz, .packet_done
		;wait for transfer to end
		;check status
		;  if printing send packet again
		;  else print over (error or success), return
		ld hl, WRAM_PRINT_STARTED
		res 0, [hl]
		ret
	.packet_done

	call StartTimer
	ret

CommandFunctionTable:
	dw SendPacketByte_Init
	dw SendPacketByte_Print
	dw SendPacketByte_Data
	dw SendPacketByte_DataEnd
	dw SendPacketByte_Break
	dw SendPacketByte_Status

SendPacketByte:
	CallFunctionFromTable CommandFunctionTable, [WRAM_PRINT_STATE + PRINT_STATE_COMMAND_TYPE]
	ret

; $1 = data packet count, $2 = data address
macro StartPrinting
	ld hl, WRAM_PRINT_STARTED
	set 0, [hl]

	copy [WRAM_PRINT_STATE + PRINT_STATE_COMMAND_TYPE], COMMAND_TYPE_INIT
	copy [WRAM_PRINT_STATE + PRINT_STATE_BYTE_NUMBER], 0
	copy [WRAM_PRINT_STATE + PRINT_STATE_FLAGS], 0

	call StartTimer
endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Memory
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

rsset _RAM

WRAM_IS_VBLANK					rb 1
WRAM_PRINT_STARTED				rb 1
WRAM_PAD_INPUT					rb sizeof_PAD_INPUT
WRAM_PRINT_STATE				rb sizeof_PRINT_STATE

WRAM_END						rb 0

; sanity checks
WRAM_USAGE						equ (WRAM_END - _RAM)
print "WRAM usage: {d:WRAM_USAGE} bytes\n"
assert WRAM_USAGE <= $2000, "Too many bytes used in WRAM"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Exports
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "sample", rom0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

InitSample:
	; init the WRAM state
	ClearMemory _RAM, WRAM_END
	InitPadInput WRAM_PAD_INPUT

	; enable interrupts
	copy [rIE], IEF_VBLANK | IEF_TIMER
	ei

	; init graphics
	copy [rBGP], %11100100

	; set the graphics parameters and turn back LCD on
	copy [rLCDC], LCDCF_ON | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_BGON

	call StopTimer
	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateSample:
	ld hl, WRAM_IS_VBLANK
	xor a
	.wait_vblank
		halt
		cp a, [hl]
		jr z, .wait_vblank
		ld [hl], a

	UpdatePadInput WRAM_PAD_INPUT

	ld a, [WRAM_PRINT_STARTED]
	bit 0, a
	jr nz, .accept_input
		TestPadInput_Released WRAM_PAD_INPUT, PADF_A
		jr nz, .start_printing
			StartPrinting 9, $0000
		.start_printing
	.accept_input

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

export InitSample, UpdateSample

