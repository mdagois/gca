include "utils.rgbinc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "vblank_interrupt", rom0[$0040]
	push af
	ld a, 1
	ld [WRAM_IS_VBLANK], a
	pop af
	reti

section "timer_interrupt", rom0[$0050]
	jp TimerInterrupt

TimerInterrupt:
	push af
	push bc
	push de
	push hl

	pop hl
	pop de
	pop bc
	pop af
	reti

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

rsset _RAM

WRAM_IS_VBLANK					rb 1

WRAM_END						rb 0

; sanity checks
WRAM_USAGE						equ (WRAM_END - _RAM)
print "WRAM usage: {d:WRAM_USAGE} bytes\n"
assert WRAM_USAGE <= $2000, "Too many bytes used in WRAM"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "protocol", rom0

rsreset
COMMAND_TYPE_INIT			rb 1
COMMAND_TYPE_PRINT			rb 1
COMMAND_TYPE_DATA_PACKET	rb 1
COMMAND_TYPE_DATA_PAYLOAD	rb 1
COMMAND_TYPE_BREAK			rb 1
COMMAND_TYPE_STATUS			rb 1
COMMAND_TYPES_COUNT			rb 0

PACKET_MAGIC_0				equ ($88)
PACKET_MAGIC_1				equ ($33)

PACKET_TYPE_INIT			equ ($01)
PACKET_TYPE_PRINT			equ ($02)
PACKET_TYPE_DATA			equ ($04)
PACKET_TYPE_BREAK			equ ($08)
PACKET_TYPE_STATUS			equ ($0F)

PACKET_COMPRESSION_OFF		equ ($00)
PACKET_COMPRESSION_ON		equ ($01)

rsreset
PRINT_STATE_COMMAND_TYPE	rb 1
PRINT_STATE_BYTE_NUMBER		rb 1
PRINT_STATE_FLAGS			rb 1
sizeof_PRINT_STATE			rb 0

macro FixedPacket
db PACKET_MAGIC_0, PACKET_MAGIC_1, \1, PACKET_COMPRESSION_OFF, $00, $00, \1, $00, $00, $00
endm

PacketInit:
	FixedPacket PACKET_TYPE_INIT

PacketDataEnd:
	FixedPacket PACKET_TYPE_DATA

PacketBreak:
	FixedPacket PACKET_TYPE_BREAK

PacketStatus:
	FixedPacket PACKET_TYPE_STATUS

macro BuildPrintPacket
	ld hl, \1
	ld [hli], PACKET_MAGIC_0
	ld [hli], PACKET_MAGIC_1
	ld [hli], PACKET_TYPE_PRINT
	ld [hli], PACKET_COMPRESSION_OFF
	ld [hli], $04
	ld [hli], $00
	ld [hli], \2
	ld [hli], \3
	ld [hli], \4
	ld [hli], \5
	push hl
		xor a
		ld h, a
		ld d, a
		ld l, PACKET_TYPE_PRINT + PACKET_COMPRESSION_OFF + $04 + $00

		ld e, \2
		add hl, de
		ld e, \3
		add hl, de
		ld e, \4
		add hl, de
		ld e, \5
		add hl, de

		ld d, h
		ld e, l
	pop hl

	ld [hli], e
	ld [hli], d
	ld [hli], $00
	ld [hli], $00
endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "sample", rom0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

InitSample:
	; init the WRAM state
	xor a
	ld [WRAM_IS_VBLANK], a

	; enable interrupts
	copy [rIE], IEF_VBLANK | IEF_TIMER
	ei

	; init graphics
	copy [rBGP], %11100100

	; set the graphics parameters and turn back LCD on
	copy [rLCDC], LCDCF_ON | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_BGON

	; set and start the timer
	xor a
	ld [rTMA], a
	ld [rTIMA], a
	ld [rDIV], a
	ld a, TACF_START | TACF_4KHZ
	ld [rTAC], a

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateSample:
	ld hl, WRAM_IS_VBLANK
	xor a
	.wait_vblank
		halt
		cp a, [hl]
		jr z, .wait_vblank
		ld [hl], a

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

export InitSample, UpdateSample

