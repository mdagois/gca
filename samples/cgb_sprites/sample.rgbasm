include "utils.rgbinc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "vblank_interrupt", rom0[$0040]
	reti

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "graphics", rom0

palette_data:
incbin "ship.pal"
palette_data_end:

tileset:
incbin "ship.chr"
tileset_end:

tilemap_indices:
incbin "ship.idx"
tilemap_indices_end:

tilemap_parameters:
incbin "ship.prm"
tilemap_parameters_end:

coins:
incbin "coins.chr"
coins_end:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

COIN_UPDATE_PERIOD				equ (10)
COIN_FRAME_MAX					equ (6)

rsset _RAM

WRAM_COIN_UPDATE_COUNTER		rb 1
WRAM_COIN_FRAME					rb 1

WRAM_END						rb 0

; sanity checks
WRAM_USAGE						equ (WRAM_END - _RAM)
print "WRAM usage: {d:WRAM_USAGE} bytes\n"
assert WRAM_USAGE <= $2000, "Too many bytes used in WRAM"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SPRITE_0_LEFT equ (_OAMRAM)
SPRITE_0_RIGHT equ (_OAMRAM + sizeof_OAM_ATTRS)
SPRITE_1_LEFT equ (_OAMRAM + sizeof_OAM_ATTRS * 2)
SPRITE_1_RIGHT equ (_OAMRAM + sizeof_OAM_ATTRS * 3)

PALETTE_0 equ (0)
PALETTE_1 equ (1)

section "sample", rom0

InitSample:
	; set wram variables
	copy [WRAM_COIN_UPDATE_COUNTER], COIN_UPDATE_PERIOD
	copy [WRAM_COIN_FRAME], 0

	; copy all the bg palettes
	ld a, 0 | BCPSF_AUTOINC
	ld [rBCPS], a
	ld hl, palette_data
	ld c, palette_data_end - palette_data
	.palette_copy
		ld a, [hli]
		ld [rBCPD], a
		dec c
		jr nz, .palette_copy

	; copy the tileset
	ld de, _VRAM8000
	ld hl, tileset
	.tileset_copy
		ld a, [hli]
		ld [de], a
		inc de

		ld a, l
		cp a, low(tileset_end)
		jr nz, .tileset_copy
		ld a, h
		cp a, high(tileset_end)
		jr nz, .tileset_copy

	; copy the tile indices into VRAM bank 0
	xor a
	ld [rVBK], a
	ld de, _SCRN0
	ld hl, tilemap_indices
	.tilemap_indices_copy
		ld a, [hli]
		ld [de], a
		inc de

		ld a, l
		cp a, low(tilemap_indices_end)
		jr nz, .tilemap_indices_copy
		ld a, h
		cp a, high(tilemap_indices_end)
		jr nz, .tilemap_indices_copy

	; copy the tile parameters into VRAM bank 1
	ld a, 1
	ld [rVBK], a
	ld de, _SCRN0
	ld hl, tilemap_parameters
	.tilemap_parameters_copy
		ld a, [hli]
		ld [de], a
		inc de

		ld a, l
		cp a, low(tilemap_parameters_end)
		jr nz, .tilemap_parameters_copy
		ld a, h
		cp a, high(tilemap_parameters_end)
		jr nz, .tilemap_parameters_copy

	; copy the coins
	ld de, _VRAM8000
	ld hl, coins
	.coins_copy
		ld a, [hli]
		ld [de], a
		inc de

		ld a, l
		cp a, low(coins_end)
		jr nz, .coins_copy
		ld a, h
		cp a, high(coins_end)
		jr nz, .coins_copy

	; clear the OAM
	InitOAM

	; set sprites palettes
	ld a, 0 | BCPSF_AUTOINC
	ld [rOCPS], a

		; black
		ld a, $00
		ld [rOCPD], a
		ld a, $00
		ld [rOCPD], a
		; orange
		ld a, $7F
		ld [rOCPD], a
		ld a, $02
		ld [rOCPD], a
		; yellow
		ld a, $BF
		ld [rOCPD], a
		ld a, $1F
		ld [rOCPD], a
		; white
		ld a, $FF
		ld [rOCPD], a
		ld a, $FF
		ld [rOCPD], a

		; black
		ld a, $00
		ld [rOCPD], a
		ld a, $00
		ld [rOCPD], a
		; red
		ld a, $5C
		ld [rOCPD], a
		ld a, $01
		ld [rOCPD], a
		; orange
		ld a, $FE
		ld [rOCPD], a
		ld a, $09
		ld [rOCPD], a
		; white
		ld a, $FF
		ld [rOCPD], a
		ld a, $FF
		ld [rOCPD], a

	ld c, 24
	.obj_palette_clear
		xor a
		ld [rOCPD], a
		ld a, $80
		ld [rOCPD], a
		dec c
		jr nz, .obj_palette_clear

	copy [SPRITE_0_LEFT + OAMA_Y], 80
	copy [SPRITE_0_LEFT + OAMA_X], 80
	copy [SPRITE_0_LEFT + OAMA_FLAGS], PALETTE_0 | OAMF_BANK1
	copy [SPRITE_0_RIGHT + OAMA_Y], 80
	copy [SPRITE_0_RIGHT + OAMA_X], 88
	copy [SPRITE_0_RIGHT + OAMA_FLAGS], PALETTE_0 | OAMF_BANK1

	copy [SPRITE_1_LEFT + OAMA_Y], 80
	copy [SPRITE_1_LEFT + OAMA_X], 96
	copy [SPRITE_1_LEFT + OAMA_FLAGS], PALETTE_1 | OAMF_BANK1
	copy [SPRITE_1_RIGHT + OAMA_Y], 80
	copy [SPRITE_1_RIGHT + OAMA_X], 104
	copy [SPRITE_1_RIGHT + OAMA_FLAGS], PALETTE_1 | OAMF_BANK1

	; enable interrupts
	copy [rIE], IEF_VBLANK
	ei

	; set LCD parameters
	ld a, LCDCF_ON | LCDCF_BG8000 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJON | LCDCF_BGON
	ld [rLCDC], a

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateSample:
	halt

	ld a, [WRAM_COIN_FRAME]
	sla a
	sla a
	copy [SPRITE_0_LEFT + OAMA_TILEID], a
	copy [SPRITE_1_LEFT + OAMA_TILEID], a
	add a, 2
	copy [SPRITE_0_RIGHT + OAMA_TILEID], a
	copy [SPRITE_1_RIGHT + OAMA_TILEID], a

	ld hl, WRAM_COIN_UPDATE_COUNTER
	dec [hl]
	jr nz, .update_frame
		ld [hl], COIN_UPDATE_PERIOD
		ld a, [WRAM_COIN_FRAME]
		inc a
		cp a, COIN_FRAME_MAX
		jr nz, .reset_frame
			xor a
		.reset_frame
		ld [WRAM_COIN_FRAME], a
	.update_frame

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

export InitSample, UpdateSample

