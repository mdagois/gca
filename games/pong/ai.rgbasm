include "ai.rgbinc"
include "math16.rgbinc"
include "memory.rgbinc"

export _AI_GetNextMove, _AI_Initialize, _AI_PickNextTarget

section "ai", rom0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

def BALL_HEIGHT             equ (4)

; target relative position of the ball to the pad
; this correspond to the 7 possible ball directions when the ball hits the pad
target_table:
db 1, 3, 6, 9, 12, 15, 17
target_table_end:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

_AI_Initialize:
    xor a
    ldh [vAiTarget], a
    ret

_AI_PickNextTarget:
    ; pick a random number between 0 and 6
    .pick_random_number
        ldh a, [vLfsrValue]
        LFSR8_GetNextValue
        ldh [vLfsrValue], a
        and a, 7
        cp a, 7
        jr z, .pick_random_number

    ; set the target offset from the ball
    ld hl, target_table
    ld d, 0
    ld e, a
    add hl, de
    ld a, [hl]
    ldh [vAiTarget], a
    ret

_AI_GetNextMove:
    ldh a, [vAiTarget]
    ld e, a

    ; compute the relative Y of the ball to the pad Y
    ; a = ball Y - pad Y
    ldh a, [vPadsY + RIGHT_INDEX]
    ld b, a
    ldh a, [vBallY + REAL_INTEGER_PART]
    add a, BALL_HEIGHT - 1
    sub a, b
    jp c, .move_up

    ; determine how to minize distance to target
    cp a, e
    jr z, .move_none
    jr nc, .move_down

    .move_up
        ld a, AI_MOVE_UP
        ret
    .move_down
        ld a, AI_MOVE_DOWN
        ret
    .move_none
        ld a, AI_MOVE_NONE
        ret

