include "memory.rgbinc"
include "sound.rgbinc"
include "utils.rgbinc"

export _Sound_Initialize, _Sound_Play, _Sound_Update

def PLAY_SOUND_BIT		equ (7)
def PLAY_SOUND_FLAG		equ (1 << PLAY_SOUND_BIT)

section "sound", rom0

_sound_data:
db $00, $08, $B8, $F0, $0B, $C6 ;SOUND_BALL_HIT_WALL
db $00, $08, $80, $F1, $0B, $C6 ;SOUND_BALL_HIT_PAD
db $03, $00, $00, $F1, $44, $C0 ;SOUND_GOAL
db $00, $17, $80, $F1, $0B, $C6 ;SOUND_BALL_SPEED_UP
db $00, $75, $80, $F8, $0B, $C6 ;SOUND_GAME_OVER
_sound_data_end:

assert (_sound_data_end - _sound_data) == SOUNDS_COUNT * 6, "Mismatch between the sound data table and sound enum"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

_Sound_Initialize:
	copy [rNR52], AUDENA_ON
	copy [rNR50], $77
	copy [rNR51], $FF
	ret

_Sound_Play:
	; (a) has the sound id

	; raise the play flag and store the parameters
	or a, PLAY_SOUND_FLAG
	ldh [vSoundParameters], a

	ret

_Sound_Update:
	; check the play flag
	ld hl, vSoundParameters
	bit PLAY_SOUND_BIT, [hl]
	ret z

	; reset the play flag
	res PLAY_SOUND_BIT, [hl]

	; get the sound id and multiply by 6
	ld a, [hl]
	add a, a
	ld b, a
	add a, a
	add a, b

	; get pointer to sound data
	ld h, 0
	ld l, a
	ld de, _sound_data
	add hl, de

	; get the channel on which to play the sound
	ld a, [hli] ; channel
	cp a, $00
	jr z, .channel_1

	cp a, $03
	jr z, .channel_4

	; ignore unsupported channels
	ret

	.channel_1

		copy [rNR10], [hli]
		copy [rNR11], [hli]
		copy [rNR12], [hli]
		copy [rNR13], [hli]
		copy [rNR14], [hli]

	ret

	.channel_4

		inc hl ; rNR40 does not exist
		copy [rNR41], [hli]
		copy [rNR42], [hli]
		copy [rNR43], [hli]
		copy [rNR44], [hli]

	ret

