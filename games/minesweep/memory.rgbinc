if !def(MEMORY_RGBINC)
def MEMORY_RGBINC equ 1

include "board.rgbinc"
include "counter.rgbinc"
include "data.rgbinc"
include "gamestate.rgbinc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; OAM addresses
rsset _OAMRAM
OAM_CURSOR				rb sizeof_OAM_ATTRS
OAM_COUNTER				rb sizeof_OAM_ATTRS * COUNTER_DIGITS_COUNT
OAM_VICTORY				rb sizeof_OAM_ATTRS * VICTORY_OAM_COUNT
OAM_END					rb 0

def OAM_USAGE				equ (OAM_END - _OAMRAM)
assert OAM_USAGE <= sizeof_OAM_ATTRS * OAM_COUNT, "Too many sprite used"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

rsset _HRAM

; input
vPadInput						rb sizeof_PAD_INPUT

; oam
vCursorOam						rb sizeof_OAM_ATTRS
vCounterOam						rb (sizeof_OAM_ATTRS * COUNTER_DIGITS_COUNT)

; board
vBoardTileRequestAddress		rw 1
vBoardTileRequestValue			rb 1

; window
vWindowTargetY					rb 1

; game state
vGameStateFuncId				rb 1
vUncoveredCount					rb 1
vFlagCoordinate					rw 1

; menu flow control
vLastGameIsWin				 	rb 1

; sound
vSoundParameters				rb 1

; rng
vLfsrValue						rb 1

HRAM_END						rb 0

def HRAM_USAGE equ (HRAM_END - _HRAM)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

rsset _RAM

; board state
; two safety rows are used to make the mine counting algorithm easier to implement
vBoardSafetyTop					rb BOARD_STATE_WIDTH + 1
vBoard							rb BOARD_STATE_SIZE
vBoardSafetyBottom				rb BOARD_STATE_WIDTH + 1

; list of board coordinates to uncover
vUncoverListSize				rb 1
vUncoverList					rw BOARD_TILES_COUNT

RAM_END							rb 0

def RAM_USAGE equ (RAM_END - _RAM)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

endc

