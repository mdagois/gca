if !def(MEMORY_RGBINC)
MEMORY_RGBINC equ 1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

include "utils.rgbinc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Function parameters
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FUNC_PARAM_COUNT				equ (2)

macro SetFuncParam
	assert \1 < FUNC_PARAM_COUNT, "Out-of-bound function parameter (\1 >= {d:FUNC_PARAM_COUNT})"
	ld [vFuncParam + \1], a
endm

macro GetFuncParam
	assert \1 < FUNC_PARAM_COUNT, "Out-of-bound function parameter (\1 >= {d:FUNC_PARAM_COUNT})"
	ld a, [vFuncParam + \1]
endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Scratchpad
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SCRATCHPAD_SIZE					equ (2)

macro SetScratchpad
	assert \1 < SCRATCHPAD_SIZE, "Out-of-bound scratchpad (\1 >= {d:SCRATCHPAD_SIZE})"
	ld [vScratchpad + \1], a
endm

macro GetScratchpad
	assert \1 < SCRATCHPAD_SIZE, "Out-of-bound scratchpad (\1 >= {d:SCRATCHPAD_SIZE})"
	ld a, [vScratchpad + \1]
endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; WRAM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

TILE_BYTE_SIZE					equ (2)
IMAGE_DATA_MAX_SIZE				equ (SCRN_X_B * SCRN_Y_B * TILE_BYTE_SIZE)
PRINT_PARAMETERS_COUNT			equ (4)

rsset _RAM

vIsVblank						rb 1

vImageDataSize					rb 2
vImageData						rb (IMAGE_DATA_MAX_SIZE)
vPrintParametersCount			rb 1
vPrintParameters				rb (PRINT_PARAMETERS_COUNT)

WRAM_END						rb 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; HRAM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PRINTER_MAGIC_BYTE_0				equ ($88)
PRINTER_MAGIC_BYTE_1				equ ($33)

PRINTER_PACKET_TYPE_INIT			equ ($01)
PRINTER_PACKET_TYPE_PRINT			equ ($02)
PRINTER_PACKET_TYPE_DATA			equ ($04)
PRINTER_PACKET_TYPE_BREAK			equ ($08)
PRINTER_PACKET_TYPE_NUL				equ ($0F)

PRINTER_COMPRESSION_FLAG_OFF		equ (%00000000)
PRINTER_COMPRESSION_FLAG_ON			equ (%00000001)

PRINTER_ACK_VALUE					equ ($81)

PRINTER_STATUS_BIT_LOW_BATTERY		equ (7)
PRINTER_STATUS_BIT_OTHER_ERROR		equ (6)
PRINTER_STATUS_BIT_PAPER_JAM		equ (5)
PRINTER_STATUS_BIT_PACKET_ERROR		equ (4)
PRINTER_STATUS_BIT_READY_TO_PRINT	equ (3)
PRINTER_STATUS_BIT_DATA_FULL		equ (2)
PRINTER_STATUS_BIT_PRINTING			equ (1)
PRINTER_STATUS_BIT_CHECKSUM_ERROR	equ (0)

PRINTER_STATUS_FLAG_LOW_BATTERY		equ (%10000000)
PRINTER_STATUS_FLAG_OTHER_ERROR		equ (%01000000)
PRINTER_STATUS_FLAG_PAPER_JAM		equ (%00100000)
PRINTER_STATUS_FLAG_PACKET_ERROR	equ (%00010000)
PRINTER_STATUS_FLAG_READY_TO_PRINT	equ (%00001000)
PRINTER_STATUS_FLAG_DATA_FULL		equ (%00000100)
PRINTER_STATUS_FLAG_PRINTING		equ (%00000010)
PRINTER_STATUS_FLAG_CHECKSUM_ERROR	equ (%00000001)

PRINTER_STATUS_PERSISTENT_FLAGS		equ (PRINTER_STATUS_FLAG_LOW_BATTERY | PRINTER_STATUS_FLAG_READY_TO_PRINT | PRINTER_STATUS_FLAG_DATA_FULL | PRINTER_STATUS_FLAG_PRINTING)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

rsreset

PACKET_TYPE_INIT			rb 1
PACKET_TYPE_PRINT			rb 1
PACKET_TYPE_DATA			rb 1
PACKET_TYPE_BREAK			rb 1
PACKET_TYPE_NUL				rb 1
PACKET_TYPES_COUNT			rb 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

rsreset

MODE_MAGIC_BYTE_0			rb 1
MODE_MAGIC_BYTE_1			rb 1
MODE_HEADER_PACKET_TYPE		rb 1
MODE_HEADER_COMPRESSION		rb 1
MODE_HEADER_DATA_SIZE_LSB	rb 1
MODE_HEADER_DATA_SIZE_MSB	rb 1
MODE_PACKET_DATA			rb 1
MODE_PACKET_PRINT			rb 1
MODE_PACKET_CHECKSUM_LSB	rb 1
MODE_PACKET_CHECKSUM_MSB	rb 1
MODE_PACKET_ACK				rb 1
MODE_PACKET_STATUS			rb 1

MODES_COUNT					rb 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

rsset _HRAM

vPadInput						rb sizeof_PAD_INPUT
vFuncParam						rb FUNC_PARAM_COUNT
vScratchpad						rb SCRATCHPAD_SIZE

vDataCompression				rb 1
vPacketType						rb 1
vPacketDataSize					rb 2
vPacketChecksum					rb 2
vMode							rb 1
vStatus							rb 1
vStatusMerge					rb 1
vCounter						rb 1

HRAM_END						rb 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

endc

